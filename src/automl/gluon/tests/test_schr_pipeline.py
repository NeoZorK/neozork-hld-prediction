#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç SCHR Levels AutoML Pipeline
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import logging
from pathlib import Path
import os

# Disable CUDA for MacBook M1
os.environ["CUDA_VISIBLE_DEVICES"] = ""
os.environ["AUTOGLUON_USE_GPU"] = "false"
os.environ["AUTOGLUON_USE_GPU_TORCH"] = "false"
os.environ["AUTOGLUON_USE_GPU_FASTAI"] = "false"

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞
import importlib.util
spec = importlib.util.spec_from_file_location("schr_levels_gluon", "../../../schr-levels-gluon.py")
schr_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(schr_module)
SCHRLevelsAutoMLPipeline = schr_module.SCHRLevelsAutoMLPipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_data_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
    
    pipeline = SCHRLevelsAutoMLPipeline()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ BTCUSD MN1
        data = pipeline.load_schr_data("BTCUSD", "MN1")
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data)} –∑–∞–ø–∏—Å–µ–π, {len(data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(data.columns)}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {data.index.min()} - {data.index.max()}")
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def test_target_creation(data):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
    
    pipeline = SCHRLevelsAutoMLPipeline()
    
    try:
        data_with_targets = pipeline.create_target_variables(data)
        print(f"‚úÖ –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(data_with_targets)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        target_cols = [col for col in data_with_targets.columns if col.startswith('target_')]
        print(f"üìä –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {target_cols}")
        
        for col in target_cols:
            print(f"   {col}: {data_with_targets[col].value_counts().to_dict()}")
        
        return data_with_targets
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
        return None

def test_feature_creation(data):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    pipeline = SCHRLevelsAutoMLPipeline()
    
    try:
        features_data = pipeline.create_features(data)
        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {len(features_data)} –∑–∞–ø–∏—Å–µ–π, {len(features_data.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        new_features = [col for col in features_data.columns if col not in data.columns]
        print(f"üìä –ù–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ ({len(new_features)}): {new_features[:10]}...")
        
        return features_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None

def test_single_model_training(data, task="pressure_vector_sign"):
    """–¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}")
    
    pipeline = SCHRLevelsAutoMLPipeline()
    
    try:
        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        original_time_limit = pipeline.task_configs[task]['time_limit']
        pipeline.task_configs[task]['time_limit'] = 300  # 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        
        results = pipeline.train_model(data, task, test_size=0.3)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {results['metrics']}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π time_limit
        pipeline.task_configs[task]['time_limit'] = original_time_limit
        
        return results
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return None

def test_prediction(data, task="pressure_vector_sign"):
    """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print(f"\nüîÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task}")
    
    pipeline = SCHRLevelsAutoMLPipeline()
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        results = pipeline.train_model(data, task, test_size=0.3)
        
        if results:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
            test_data = data.tail(1)
            predictions = pipeline.predict(test_data, task)
            
            print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!")
            print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predictions.iloc[0]}")
            
            return predictions
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç SCHR Levels AutoML Pipeline")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = test_data_loading()
    if data is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    data_with_targets = test_target_creation(data)
    if data_with_targets is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    final_data = test_feature_creation(data_with_targets)
    if final_data is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return
    
    # –¢–µ—Å—Ç 4: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model_results = test_single_model_training(final_data, "pressure_vector_sign")
    if model_results is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return
    
    # –¢–µ—Å—Ç 5: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions = test_prediction(final_data, "pressure_vector_sign")
    if predictions is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return
    
    print("\n" + "="*60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("="*60)

if __name__ == "__main__":
    main()
