#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Markdown –≤ HTML Manual –¥–ª—è AutoML Gluon
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç 33 –≥–ª–∞–≤—ã –∏–∑ .md —Ñ–∞–π–ª–æ–≤ –≤ –µ–¥–∏–Ω—ã–π HTML –º–∞–Ω—É–∞–ª –≤ —Å—Ç–∏–ª–µ Python_Formatting_Example.html

–ê–≤—Ç–æ—Ä: Shcherbyna Rostyslav
–î–∞—Ç–∞: 2024
"""

import os
import re
import glob
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
import markdown
from markdown.extensions import codehilite, tables, toc

class AutoMLGluonHTMLConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Markdown —Ñ–∞–π–ª–æ–≤ –≤ HTML –º–∞–Ω—É–∞–ª –¥–ª—è AutoML Gluon"""
    
    def __init__(self, source_dir: str = "docs/automl/gluon", output_dir: str = "docs/automl/gluon"):
        self.source_dir = Path(source_dir)
        self.output_dir = Path(output_dir)
        self.chapters = []
        self.toc_items = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Markdown
        self.md = markdown.Markdown(
            extensions=[
                'codehilite',
                'tables',
                'toc',
                'fenced_code',
                'attr_list',
                'def_list',
                'footnotes',
                'md_in_html'
            ],
            extension_configs={
                'codehilite': {
                    'css_class': 'language-python',
                    'use_pygments': True,
                    'noclasses': False
                },
                'toc': {
                    'permalink': True,
                    'permalink_title': '–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª'
                }
            }
        )
    
    def get_chapter_order(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≥–ª–∞–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return [
            "01_installation.md",
            "02_basic_usage.md", 
            "03_advanced_configuration.md",
            "04_risk_analysis.md",
            "05_low_risk_systems.md",
            "06_metrics.md",
            "07_validation.md",
            "08_production.md",
            "09_retraining.md",
            "10_best_practices.md",
            "11_apple_silicon_optimization.md",
            "12_examples.md",
            "13_simple_production_example.md",
            "14_advanced_production_example.md",
            "15_theory_and_fundamentals.md",
            "16_troubleshooting.md",
            "17_interpretability_and_explainability.md",
            "18_advanced_topics.md",
            "19_ethics_and_responsible_ai.md",
            "20_case_studies.md",
            "21_wave2_indicator_analysis.md",
            "22_schr_levels_analysis.md",
            "23_schr_short3_analysis.md",
            "24_super_system_ultimate.md",
            "25_reading_guide.md",
            "26_probability_usage_guide.md",
            "27_trading_bot_monitoring.md",
            "28_feature_generation_advanced.md",
            "29_backtesting_methods.md",
            "30_walk_forward_analysis.md",
            "31_monte_carlo_simulations.md",
            "32_portfolio_management.md",
            "33_llm_parallel_computing_setup.md"
        ]
    
    def get_chapter_info(self, filename: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        chapter_num = filename.split('_')[0]
        chapter_name = filename.replace('.md', '').replace(f"{chapter_num}_", "").replace('_', ' ').title()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥–ª–∞–≤
        special_names = {
            "01_installation": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
            "02_basic_usage": "–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", 
            "03_advanced_configuration": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "04_risk_analysis": "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤",
            "05_low_risk_systems": "–ù–∏–∑–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã",
            "06_metrics": "–ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∞",
            "07_validation": "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π",
            "08_production": "–ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ",
            "09_retraining": "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
            "10_best_practices": "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
            "11_apple_silicon_optimization": "Apple Silicon –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "12_examples": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã",
            "13_simple_production_example": "–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥–∞–∫—à–µ–Ω –ø—Ä–∏–º–µ—Ä",
            "14_advanced_production_example": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ–¥–∞–∫—à–µ–Ω",
            "15_theory_and_fundamentals": "–¢–µ–æ—Ä–∏—è –∏ –æ—Å–Ω–æ–≤—ã",
            "16_troubleshooting": "Troubleshooting",
            "17_interpretability_and_explainability": "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å",
            "18_advanced_topics": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–º—ã",
            "19_ethics_and_responsible_ai": "–≠—Ç–∏–∫–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π AI",
            "20_case_studies": "–ö–µ–π—Å-—Å—Ç–∞–¥–∏",
            "21_wave2_indicator_analysis": "Wave2 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑",
            "22_schr_levels_analysis": "SCHR —É—Ä–æ–≤–Ω–∏ –∞–Ω–∞–ª–∏–∑",
            "23_schr_short3_analysis": "SCHR short3 –∞–Ω–∞–ª–∏–∑",
            "24_super_system_ultimate": "–°—É–ø–µ—Ä —Å–∏—Å—Ç–µ–º–∞ Ultimate",
            "25_reading_guide": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —á—Ç–µ–Ω–∏—é",
            "26_probability_usage_guide": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º",
            "27_trading_bot_monitoring": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞",
            "28_feature_generation_advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
            "29_backtesting_methods": "–ú–µ—Ç–æ–¥—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞",
            "30_walk_forward_analysis": "Walk-forward –∞–Ω–∞–ª–∏–∑",
            "31_monte_carlo_simulations": "–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏",
            "32_portfolio_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
            "33_llm_parallel_computing_setup": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"
        }
        
        return {
            'number': chapter_num,
            'name': special_names.get(filename.replace('.md', ''), chapter_name),
            'filename': filename
        }
    
    def process_markdown_file(self, filepath: Path) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω Markdown —Ñ–∞–π–ª"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            title_match = re.search(r'^# (.+)$', content, re.MULTILINE)
            author_match = re.search(r'\*\*–ê–≤—Ç–æ—Ä:\*\* (.+)$', content, re.MULTILINE)
            date_match = re.search(r'\*\*–î–∞—Ç–∞:\*\* (.+)$', content, re.MULTILINE)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            content = self.process_images(content)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML
            html_content = self.md.convert(content)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ markdown –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
            self.md.reset()
            
            return {
                'title': title_match.group(1) if title_match else filepath.stem,
                'author': author_match.group(1) if author_match else 'Shcherbyna Rostyslav',
                'date': date_match.group(1) if date_match else '2024',
                'content': html_content,
                'filename': filepath.name
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
            return None
    
    def process_images(self, content: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
        # –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
        content = re.sub(
            r'<img src="images/',
            '<img src="images/',
            content
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        content = re.sub(
            r'<img src="([^"]+)" alt="([^"]*)"',
            r'<img src="\1" alt="\2" style="max-width: 100%; height: auto; display: block; margin: 20px auto; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);"',
            content
        )
        
        return content
    
    def generate_toc(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ"""
        toc_html = '<div class="toc">\n'
        toc_html += '<h2>üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (33 –≥–ª–∞–≤—ã)</h2>\n'
        toc_html += '<div class="toc-grid">\n'
        
        for i, chapter in enumerate(self.chapters, 1):
            if chapter:
                chapter_info = self.get_chapter_info(chapter['filename'])
                toc_html += f'''
                <div class="toc-item">
                    <h3>{i}. {chapter_info['name']}</h3>
                    <p>{self.get_chapter_description(chapter_info['name'])}</p>
                </div>
                '''
        
        toc_html += '</div>\n</div>\n'
        return toc_html
    
    def get_chapter_description(self, chapter_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤—ã"""
        descriptions = {
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞": "–ü–æ—à–∞–≥–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": "–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å TabularPredictor, –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": "–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∞–Ω—Å–∞–º–±–ª–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—è, feature engineering",
            "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ, –±–∏–∑–Ω–µ—Å –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ ML-—Å–∏—Å—Ç–µ–º",
            "–ù–∏–∑–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã": "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö ML-—Å–∏—Å—Ç–µ–º",
            "–ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∞": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π": "Cross-validation, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã, walk-forward –∞–Ω–∞–ª–∏–∑",
            "–ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ": "API —Å–µ—Ä–≤–µ—Ä—ã, Docker, Kubernetes, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—Ä–µ–π—Ñ–∞",
            "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "Apple Silicon –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": "M1/M2/M3, MLX, Metal Performance Shaders",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã": "–ë–∞–Ω–∫, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥–∞–∫—à–µ–Ω –ø—Ä–∏–º–µ—Ä": "–û—Ç –∏–¥–µ–∏ –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –¥–µ–ø–ª–æ—è –∑–∞ 8 —à–∞–≥–æ–≤",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ–¥–∞–∫—à–µ–Ω": "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "–¢–µ–æ—Ä–∏—è –∏ –æ—Å–Ω–æ–≤—ã": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –ø—Ä–∏–Ω—Ü–∏–ø—ã",
            "Troubleshooting": "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º, –æ—Ç–ª–∞–¥–∫–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å": "–û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π, SHAP, LIME",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–º—ã": "–ê–Ω—Å–∞–º–±–ª–∏, feature engineering, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "–≠—Ç–∏–∫–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π AI": "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–ö–µ–π—Å-—Å—Ç–∞–¥–∏": "–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è",
            "Wave2 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã",
            "SCHR —É—Ä–æ–≤–Ω–∏ –∞–Ω–∞–ª–∏–∑": "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
            "SCHR short3 –∞–Ω–∞–ª–∏–∑": "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
            "–°—É–ø–µ—Ä —Å–∏—Å—Ç–µ–º–∞ Ultimate": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
            "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —á—Ç–µ–Ω–∏—é": "–ö–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª",
            "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º": "–†–∞–±–æ—Ç–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –≤ ML",
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤": "Feature engineering –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á",
            "–ú–µ—Ç–æ–¥—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
            "Walk-forward –∞–Ω–∞–ª–∏–∑": "–°–∫–æ–ª—å–∑—è—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            "–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏": "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π": "LLM –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
        }
        return descriptions.get(chapter_name, "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã")
    
    def generate_html_template(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —à–∞–±–ª–æ–Ω –≤ —Å—Ç–∏–ª–µ Python_Formatting_Example.html"""
        return '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AutoML Gluon - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ (33 –≥–ª–∞–≤—ã)</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }}
        
        .container {{
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            border: none;
        }
        
        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .toc {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 40px;
            border-left: 4px solid #667eea;
        }
        
        .toc h2 {
            color: #667eea;
            margin-bottom: 20px;
            border: none;
            padding: 0;
        }
        
        .toc-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }
        
        .toc-item {
            background: white;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            transition: transform 0.3s ease;
        }
        
        .toc-item:hover {
            transform: translateX(5px);
        }
        
        .toc-item h3 {
            color: #495057;
            margin-bottom: 8px;
            font-size: 1.1em;
        }
        
        .toc-item p {
            color: #6c757d;
            font-size: 0.9em;
            margin: 0;
        }
        
        h1 {
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        
        h2 {
            color: #34495e;
            margin-top: 40px;
            border-left: 4px solid #3498db;
            padding-left: 15px;
        }
        
        h3 {
            color: #495057;
            margin-top: 30px;
            border-left: 3px solid #667eea;
            padding-left: 12px;
        }
        
        h4 {
            color: #6c757d;
            margin-top: 20px;
        }
        
        /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Python –∫–æ–¥–∞ */
        pre {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            border-radius: 8px;
            overflow-x: auto;
            border-left: 4px solid #3776ab;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            margin: 20px 0;
            position: relative;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 14px;
            line-height: 1.5;
        }
        
        pre::before {
            content: "Python";
            position: absolute;
            top: 10px;
            right: 15px;
            background: #3776ab;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
        }
        
        /* –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ */
        .token.comment {
            color: #6a9955;
            font-style: italic;
        }
        
        .token.keyword {
            color: #569cd6;
            font-weight: bold;
        }
        
        .token.string {
            color: #ce9178;
        }
        
        .token.number {
            color: #b5cea8;
        }
        
        .token.function {
            color: #dcdcaa;
        }
        
        .token.class-name {
            color: #4ec9b0;
        }
        
        .token.operator {
            color: #d4d4d4;
        }
        
        .token.punctuation {
            color: #d4d4d4;
        }
        
        .token.variable {
            color: #9cdcfe;
        }
        
        .token.constant {
            color: #4fc1ff;
        }
        
        .token.builtin {
            color: #dcdcaa;
        }
        
        .token.boolean {
            color: #569cd6;
        }
        
        .explanation {
            background: #f8f9fa;
            border-left: 4px solid #17a2b8;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .warning {
            background: #f8d7da;
            border-left: 4px solid #dc3545;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .info {
            background: #d1ecf1;
            border-left: 4px solid #0dcaf0;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .success {
            background: #d4edda;
            border-left: 4px solid #28a745;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .feature-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        
        .feature-card h4 {
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .metrics-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .metrics-table th,
        .metrics-table td {
            border: 1px solid #dee2e6;
            padding: 12px;
            text-align: left;
        }
        
        .metrics-table th {
            background-color: #667eea;
            color: white;
        }
        
        .metrics-table tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        
        .chapter {
            margin-bottom: 60px;
            padding: 30px;
            background: #f8f9fa;
            border-radius: 10px;
            border-left: 5px solid #667eea;
        }
        
        .chapter h2 {
            color: #667eea;
            margin-top: 0;
            border: none;
            padding: 0;
        }
        
        .back-to-top {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #667eea;
            color: white;
            padding: 10px 15px;
            border-radius: 50px;
            text-decoration: none;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        }
        
        .back-to-top:hover {
            background: #5a6fd8;
            transform: translateY(-2px);
        }
        
        @media (max-width: 768px) {
            .toc-grid {
                grid-template-columns: 1fr;
            }
            
            .feature-grid {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>AutoML Gluon</h1>
            <p>–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é</p>
            <p><strong>33 –≥–ª–∞–≤—ã</strong> | <strong>–ê–≤—Ç–æ—Ä:</strong> Shcherbyna Rostyslav | <strong>–î–∞—Ç–∞:</strong> 2024</p>
        </div>

        {toc}

        {content}
    </div>

    <a href="#" class="back-to-top">‚Üë –ù–∞–≤–µ—Ä—Ö</a>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prism.js –¥–ª—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if (typeof Prism !== 'undefined') {
            Prism.highlightAll();
        }

        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è–∫–æ—Ä—è–º
        document.addEventListener('DOMContentLoaded', function() {
            const links = document.querySelectorAll('a[href^="#"]');
            links.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö"
            const backToTop = document.querySelector('.back-to-top');
            backToTop.addEventListener('click', function(e) {
                e.preventDefault();
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });

            // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤–µ—Ä—Ö"
            window.addEventListener('scroll', function() {
                if (window.scrollY > 300) {
                    backToTop.style.display = 'block';
                } else {
                    backToTop.style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>'''
    
    def convert_chapters(self) -> None:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≥–ª–∞–≤—ã"""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≥–ª–∞–≤...")
        
        chapter_order = self.get_chapter_order()
        
        for filename in chapter_order:
            filepath = self.source_dir / filename
            if filepath.exists():
                print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {filename}")
                chapter_data = self.process_markdown_file(filepath)
                if chapter_data:
                    self.chapters.append(chapter_data)
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.chapters)} –≥–ª–∞–≤")
    
    def generate_html(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π HTML –º–∞–Ω—É–∞–ª"""
        print("üî® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –º–∞–Ω—É–∞–ª...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
        toc_html = self.generate_toc()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≥–ª–∞–≤
        content_html = ""
        for i, chapter in enumerate(self.chapters, 1):
            if chapter:
                chapter_info = self.get_chapter_info(chapter['filename'])
                content_html += f'''
                <div class="chapter" id="chapter-{i}">
                    <h2>{i}. {chapter_info['name']}</h2>
                    {chapter['content']}
                </div>
                '''
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π HTML
        html_template = self.generate_html_template()
        full_html = html_template.format(
            toc=toc_html,
            content=content_html
        )
        
        return full_html
    
    def save_html(self, html_content: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –≤ —Ñ–∞–π–ª"""
        output_file = self.output_dir / "AutoML_Gluon_Complete_Manual.html"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üíæ HTML –º–∞–Ω—É–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ Markdown ‚Üí HTML")
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.source_dir}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—ã
        self.convert_chapters()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
        html_content = self.generate_html()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
        self.save_html(html_content)
        
        print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    converter = AutoMLGluonHTMLConverter()
    converter.run()

if __name__ == "__main__":
    main()
