#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤ –≤ –µ–¥–∏–Ω—ã–π HTML —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞
–ê–≤—Ç–æ—Ä: NeoZorK (Shcherbyna Rostyslav)
–î–∞—Ç–∞: 2025
"""

import os
import re
from pathlib import Path

def convert_md_to_html(md_content):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è markdown –≤ HTML —Å –±–∞–∑–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    md_content = re.sub(r'^# (.*)', r'<h1>\1</h1>', md_content, flags=re.MULTILINE)
    md_content = re.sub(r'^## (.*)', r'<h2>\1</h2>', md_content, flags=re.MULTILINE)
    md_content = re.sub(r'^### (.*)', r'<h3>\1</h3>', md_content, flags=re.MULTILINE)
    md_content = re.sub(r'^#### (.*)', r'<h4>\1</h4>', md_content, flags=re.MULTILINE)
    
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    md_content = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', md_content)
    
    # –ö—É—Ä—Å–∏–≤
    md_content = re.sub(r'\*(.*?)\*', r'<em>\1</em>', md_content)
    
    # –ö–æ–¥
    md_content = re.sub(r'`([^`]+)`', r'<code>\1</code>', md_content)
    
    # –ë–ª–æ–∫–∏ –∫–æ–¥–∞
    md_content = re.sub(r'```python\n(.*?)\n```', r'<pre><code class="language-python">\1</code></pre>', md_content, flags=re.DOTALL)
    md_content = re.sub(r'```bash\n(.*?)\n```', r'<pre><code class="language-bash">\1</code></pre>', md_content, flags=re.DOTALL)
    md_content = re.sub(r'```\n(.*?)\n```', r'<pre><code>\1</code></pre>', md_content, flags=re.DOTALL)
    
    # –°–ø–∏—Å–∫–∏
    md_content = re.sub(r'^- (.*)', r'<li>\1</li>', md_content, flags=re.MULTILINE)
    md_content = re.sub(r'^(\d+)\. (.*)', r'<li>\2</li>', md_content, flags=re.MULTILINE)
    
    # –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    paragraphs = md_content.split('\n\n')
    html_paragraphs = []
    
    for para in paragraphs:
        if para.strip():
            if not para.startswith('<'):
                para = f'<p>{para}</p>'
            html_paragraphs.append(para)
    
    return '\n\n'.join(html_paragraphs)

def create_complete_html_manual():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ HTML —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏–∑ –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤"""
    
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ HTML —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ ===")
    print("–ê–≤—Ç–æ—Ä: NeoZorK (Shcherbyna Rostyslav)")
    print("–î–∞—Ç–∞: 2025")
    
    # –ü—É—Ç–∏
    docs_dir = Path("/Users/rostsh/Documents/DIS/REPO/neozork-hld-prediction/docs/automl/gluon")
    output_file = docs_dir / "AutoML_Gluon_Complete_Manual_Full.html"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    md_files = [
        "01_installation.md",
        "02_basic_usage.md", 
        "03_advanced_configuration.md",
        "04_metrics.md",
        "05_validation.md",
        "06_production.md",
        "07_retraining.md",
        "08_best_practices.md",
        "09_examples.md",
        "10_troubleshooting.md",
        "11_apple_silicon_optimization.md",
        "12_simple_production_example.md",
        "13_advanced_production_example.md",
        "14_theory_and_fundamentals.md",
        "15_interpretability_and_explainability.md",
        "16_advanced_topics.md",
        "17_ethics_and_responsible_ai.md",
        "18_case_studies.md",
        "19_wave2_indicator_analysis.md",
        "20_schr_levels_analysis.md",
        "21_schr_short3_analysis.md",
        "22_super_system_ultimate.md",
        "23_reading_guide.md",
        "24_probability_usage_guide.md",
        "25_trading_bot_monitoring.md"
    ]
    
    # HTML —à–∞–±–ª–æ–Ω —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —Å—Ç–∏–ª–µ Python_Formatting_Example.html
    html_template = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AutoML Gluon - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        
        .container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        h1 {
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        
        h2 {
            color: #34495e;
            margin-top: 30px;
            border-left: 4px solid #3498db;
            padding-left: 15px;
        }
        
        h3 {
            color: #2c3e50;
            margin-top: 25px;
        }
        
        /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Python –∫–æ–¥–∞ */
        pre {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            border-radius: 8px;
            overflow-x: auto;
            border-left: 4px solid #3776ab;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            margin: 20px 0;
            position: relative;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 14px;
            line-height: 1.5;
        }
        
        pre::before {
            content: "Python";
            position: absolute;
            top: 10px;
            right: 15px;
            background: #3776ab;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
        }
        
        /* –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ */
        .token.comment {
            color: #6a9955;
            font-style: italic;
        }
        
        .token.keyword {
            color: #569cd6;
            font-weight: bold;
        }
        
        .token.string {
            color: #ce9178;
        }
        
        .token.number {
            color: #b5cea8;
        }
        
        .token.function {
            color: #dcdcaa;
        }
        
        .token.class-name {
            color: #4ec9b0;
        }
        
        .token.operator {
            color: #d4d4d4;
        }
        
        .token.punctuation {
            color: #d4d4d4;
        }
        
        .token.variable {
            color: #9cdcfe;
        }
        
        .token.constant {
            color: #4fc1ff;
        }
        
        .token.builtin {
            color: #dcdcaa;
        }
        
        .token.boolean {
            color: #569cd6;
        }
        
        .explanation {
            background: #f8f9fa;
            border-left: 4px solid #17a2b8;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .warning {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .success {
            background: #d4edda;
            border-left: 4px solid #28a745;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .toc {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .toc h3 {
            margin-top: 0;
            color: #2c3e50;
        }
        
        .toc ul {
            list-style: none;
            padding-left: 0;
        }
        
        .toc li {
            margin: 8px 0;
        }
        
        .toc a {
            color: #3498db;
            text-decoration: none;
            padding: 5px 10px;
            border-radius: 4px;
            display: block;
            transition: background-color 0.2s;
        }
        
        .toc a:hover {
            background-color: #e3f2fd;
        }
        
        .section {
            margin: 40px 0;
            padding: 20px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
        }
        
        .author-info {
            background: #e8f4fd;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 5px 5px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>AutoML Gluon - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
        
        <div class="author-info">
            <strong>–ê–≤—Ç–æ—Ä:</strong> NeoZorK (Shcherbyna Rostyslav)<br>
            <strong>–î–∞—Ç–∞:</strong> 2025<br>
            <strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> Ukraine, Zaporizhzhya<br>
            <strong>–í–µ—Ä—Å–∏—è:</strong> 1.0
        </div>
        
        <div class="explanation">
            <strong>üéØ –û —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ:</strong><br>
            –≠—Ç–æ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ AutoML Gluon - –º–æ—â–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Ç Amazon. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AutoML Gluon –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
        </div>
        
        <div class="toc">
            <h3>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
            <ul>
                <li><a href="#installation">1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AutoML Gluon</a></li>
                <li><a href="#basic-usage">2. –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</a></li>
                <li><a href="#advanced-configuration">3. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</a></li>
                <li><a href="#metrics">4. –ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</a></li>
                <li><a href="#validation">5. –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π</a></li>
                <li><a href="#production">6. –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∏ –¥–µ–ø–ª–æ–π</a></li>
                <li><a href="#retraining">7. –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</a></li>
                <li><a href="#best-practices">8. –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</a></li>
                <li><a href="#examples">9. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a></li>
                <li><a href="#troubleshooting">10. Troubleshooting</a></li>
                <li><a href="#apple-silicon">11. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Apple Silicon</a></li>
                <li><a href="#simple-production">12. –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</a></li>
                <li><a href="#advanced-production">13. –°–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</a></li>
                <li><a href="#theory">14. –¢–µ–æ—Ä–∏—è –∏ –æ—Å–Ω–æ–≤—ã AutoML</a></li>
                <li><a href="#interpretability">15. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å</a></li>
                <li><a href="#advanced-topics">16. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–º—ã</a></li>
                <li><a href="#ethics">17. –≠—Ç–∏–∫–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π AI</a></li>
                <li><a href="#case-studies">18. –ö–µ–π—Å-—Å—Ç–∞–¥–∏</a></li>
                <li><a href="#wave2-analysis">19. WAVE2 –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</a></li>
                <li><a href="#schr-levels">20. SCHR Levels - –ê–Ω–∞–ª–∏–∑ –∏ ML-–º–æ–¥–µ–ª—å</a></li>
                <li><a href="#schr-short3">21. SCHR SHORT3 - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</a></li>
                <li><a href="#super-system">22. –°—É–ø–µ—Ä-—Å–∏—Å—Ç–µ–º–∞: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤</a></li>
                <li><a href="#reading-guide">23. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —É—á–µ–±–Ω–∏–∫–∞</a></li>
                <li><a href="#probability-usage">24. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</a></li>
                <li><a href="#monitoring">25. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞</a></li>
            </ul>
        </div>
        
        {content}
    </div>
    
    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prism.js –¥–ª—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if (typeof Prism !== 'undefined') {
            Prism.highlightAll();
        }
        
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è–∫–æ—Ä—è–º
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    </script>
</body>
</html>"""
    
    # –ß—Ç–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤
    all_content = []
    
    for i, md_file in enumerate(md_files, 1):
        md_path = docs_dir / md_file
        if md_path.exists():
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/25: {md_file}")
            
            with open(md_path, 'r', encoding='utf-8') as f:
                md_content = f.read()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ HTML
            html_content = convert_md_to_html(md_content)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            section_id = md_file.replace('.md', '').replace('_', '-')
            html_content = f'<div class="section" id="{section_id}">\n{html_content}\n</div>'
            
            all_content.append(html_content)
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {md_file}")
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    full_content = '\n\n'.join(all_content)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ HTML
    final_html = html_template.format(content=full_content)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(final_html)
    
    print(f"\n‚úÖ –ü–æ–ª–Ω–æ–µ HTML —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {output_file}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(all_content)}/25")
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(output_file) / 1024:.1f} KB")
    
    return True

if __name__ == "__main__":
    success = create_complete_html_manual()
    if success:
        print("\nüéâ –ü–æ–ª–Ω–æ–µ HTML —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("–§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.")
