#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ PDF —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF

–ê–≤—Ç–æ—Ä: Shcherbyna Rostyslav
–î–∞—Ç–∞: 2024
"""

import os
import subprocess
from pathlib import Path

def create_pdf_simple():
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    script_dir = Path(__file__).parent
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = script_dir.parent.parent.parent.parent.parent
    docs_dir = project_root / "docs" / "automl" / "gluon"
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"Script dir: {script_dir}")
    print(f"Project root: {project_root}")
    print(f"Docs dir: {docs_dir}")
    print(f"Docs dir exists: {docs_dir.exists()}")
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    if not docs_dir.exists():
        docs_dir = Path("/Users/rostsh/Documents/DIS/REPO/neozork-hld-prediction/docs/automl/gluon")
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {docs_dir}")
        print(f"Docs dir exists: {docs_dir.exists()}")
    
    html_file = docs_dir / "AutoML_Gluon_Complete_Manual_Enhanced.html"
    output_pdf = docs_dir / "AutoML_Gluon_Complete_Manual.pdf"
    
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ PDF –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º ===")
    print(f"HTML —Ñ–∞–π–ª: {html_file}")
    print(f"–í—ã—Ö–æ–¥–Ω–æ–π PDF: {output_pdf}")
    
    if not html_file.exists():
        print(f"‚úó HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_file}")
        return False
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º wkhtmltopdf –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        print("–ü–æ–ø—ã—Ç–∫–∞ 1: wkhtmltopdf...")
        try:
            result = subprocess.run([
                'wkhtmltopdf',
                '--page-size', 'A4',
                '--margin-top', '1cm',
                '--margin-right', '1cm',
                '--margin-bottom', '1cm',
                '--margin-left', '1cm',
                '--encoding', 'UTF-8',
                '--print-media-type',
                str(html_file),
                str(output_pdf)
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                print(f"‚úì PDF —Å–æ–∑–¥–∞–Ω —Å wkhtmltopdf: {output_pdf}")
                return True
            else:
                print(f"wkhtmltopdf –æ—à–∏–±–∫–∞: {result.stderr}")
        except FileNotFoundError:
            print("wkhtmltopdf –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except subprocess.TimeoutExpired:
            print("wkhtmltopdf timeout")
        
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º Chrome/Chromium
        print("–ü–æ–ø—ã—Ç–∫–∞ 2: Chrome/Chromium...")
        chrome_paths = [
            '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',
            '/Applications/Chromium.app/Contents/MacOS/Chromium',
            '/usr/bin/google-chrome',
            '/usr/bin/chromium-browser'
        ]
        
        chrome_path = None
        for path in chrome_paths:
            if os.path.exists(path):
                chrome_path = path
                break
        
        if chrome_path:
            try:
                result = subprocess.run([
                    chrome_path,
                    '--headless',
                    '--disable-gpu',
                    '--print-to-pdf=' + str(output_pdf),
                    '--print-to-pdf-no-header',
                    '--run-all-compositor-stages-before-draw',
                    '--virtual-time-budget=5000',
                    str(html_file)
                ], capture_output=True, text=True, timeout=60)
                
                if result.returncode == 0 and output_pdf.exists():
                    print(f"‚úì PDF —Å–æ–∑–¥–∞–Ω —Å Chrome: {output_pdf}")
                    return True
                else:
                    print(f"Chrome –æ—à–∏–±–∫–∞: {result.stderr}")
            except subprocess.TimeoutExpired:
                print("Chrome timeout")
        else:
            print("Chrome/Chromium –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ø—ã—Ç–∫–∞ 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º Safari (macOS)
        print("–ü–æ–ø—ã—Ç–∫–∞ 3: Safari...")
        try:
            # –°–æ–∑–¥–∞–µ–º AppleScript –¥–ª—è Safari
            applescript = f'''
            tell application "Safari"
                activate
                open location "file://{html_file.absolute()}"
                delay 3
                tell application "System Events"
                    keystroke "p" using command down
                    delay 1
                    keystroke "s" using command down
                    delay 1
                    keystroke "{output_pdf.name}"
                    delay 1
                    keystroke return
                end tell
            end tell
            '''
            
            result = subprocess.run([
                'osascript', '-e', applescript
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print(f"‚úì PDF —Å–æ–∑–¥–∞–Ω —Å Safari: {output_pdf}")
                return True
            else:
                print(f"Safari –æ—à–∏–±–∫–∞: {result.stderr}")
        except subprocess.TimeoutExpired:
            print("Safari timeout")
        
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return False
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ PDF —É—á–µ–±–Ω–∏–∫–∞ AutoML Gluon (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±) ===")
    print("–ê–≤—Ç–æ—Ä: Shcherbyna Rostyslav")
    print("–î–∞—Ç–∞: 2024")
    
    success = create_pdf_simple()
    
    if success:
        print("\nüéâ PDF —É—á–µ–±–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print("–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ HTML —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("2. –ù–∞–∂–º–∏—Ç–µ Cmd+P (–ø–µ—á–∞—Ç—å)")
        print("3. –í—ã–±–µ—Ä–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF'")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ")

if __name__ == "__main__":
    main()
