#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ markdown —Ñ–∞–π–ª–∞—Ö
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

–ê–≤—Ç–æ—Ä: NeoZorK (Shcherbyna Rostyslav)
–î–∞—Ç–∞: 2025
"""

import os
import re
from pathlib import Path

def fix_parameter_formatting(content):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "**–ü–∞—Ä–∞–º–µ—Ç—Ä `name`:**" –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    param_pattern = r'\*\*–ü–∞—Ä–∞–º–µ—Ç—Ä `([^`]+)`:\*\*'
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏
    parts = re.split(param_pattern, content)
    
    if len(parts) < 2:
        return content
    
    result = []
    i = 0
    
    while i < len(parts):
        if i == 0:
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
            result.append(parts[i])
        elif i % 2 == 1:
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            param_name = parts[i]
            result.append(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä `{param_name}`:**")
        else:
            # –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            param_desc = parts[i]
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            param_desc = fix_list_formatting(param_desc)
            result.append(param_desc)
        
        i += 1
    
    return ''.join(result)

def fix_list_formatting(text):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤"""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "- **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç**:"
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    lines = text.split('\n')
    fixed_lines = []
    
    for line in lines:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if line.strip().startswith('- **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç**:'):
            fixed_lines.append(f"\n- **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç**: {line.split('**: ', 1)[1] if '**: ' in line else line.split('**:')[1]}")
        elif line.strip().startswith('- **–ó–∞—á–µ–º –Ω—É–∂–µ–Ω**:'):
            fixed_lines.append(f"- **–ó–∞—á–µ–º –Ω—É–∂–µ–Ω**: {line.split('**: ', 1)[1] if '**: ' in line else line.split('**:')[1]}")
        elif line.strip().startswith('- **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è**:'):
            fixed_lines.append(f"- **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è**:")
        elif line.strip().startswith('- **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏**:'):
            fixed_lines.append(f"- **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏**: {line.split('**: ', 1)[1] if '**: ' in line else line.split('**:')[1]}")
        elif line.strip().startswith('- **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä**:'):
            fixed_lines.append(f"- **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä**: {line.split('**: ', 1)[1] if '**: ' in line else line.split('**:')[1]}")
        elif line.strip().startswith('- **–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'):
            fixed_lines.append(f"- **{line.split('- **')[1].split('**:')[0]}**:")
        elif line.strip().startswith('- **–í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏**:'):
            fixed_lines.append(f"- **–í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏**:")
        elif line.strip().startswith('- **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º**:'):
            fixed_lines.append(f"- **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º**:")
        elif line.strip().startswith('- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'):
            fixed_lines.append(f"- **{line.split('- **')[1].split('**:')[0]}**:")
        elif line.strip().startswith('- **–í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è**:'):
            fixed_lines.append(f"- **–í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è**:")
        elif line.strip().startswith('- **–ü–∞—Ä–∞–º–µ—Ç—Ä `'):
            # –≠—Ç–æ –ø–æ–¥–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            fixed_lines.append(f"\n- **{line.split('- **')[1].split('**:')[0]}**:")
        elif line.strip().startswith('  - **'):
            # –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            fixed_lines.append(f"  - **{line.split('  - **')[1].split('**:')[0]}**: {line.split('**: ', 1)[1] if '**: ' in line else ''}")
        elif line.strip().startswith('  - `'):
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            fixed_lines.append(line)
        elif line.strip().startswith('- **'):
            # –î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if '**:' in line:
                param_name = line.split('- **')[1].split('**:')[0]
                param_value = line.split('**: ', 1)[1] if '**: ' in line else ''
                fixed_lines.append(f"- **{param_name}**: {param_value}")
            else:
                fixed_lines.append(line)
        else:
            fixed_lines.append(line)
    
    return '\n'.join(fixed_lines)

def fix_markdown_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ markdown —Ñ–∞–π–ª–∞"""
    
    print(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º: {file_path.name}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        content = fix_parameter_formatting(content)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤
        content = re.sub(r'-\s*\*\*([^*]+)\*\*:\s*([^\n]+)', r'- **\1**: \2', content)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        content = re.sub(r'^  -\s*\*\*([^*]+)\*\*:\s*([^\n]+)', r'  - **\1**: \2', content, flags=re.MULTILINE)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        content = re.sub(r'\n\n\n+', '\n\n', content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"  ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path.name}")
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path.name}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ markdown —Ñ–∞–π–ª–∞—Ö")
    print("–ê–≤—Ç–æ—Ä: NeoZorK (Shcherbyna Rostyslav)")
    print("–î–∞—Ç–∞: 2025")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
    project_root = Path(__file__).parent.parent.parent.parent.parent
    docs_dir = project_root / "docs" / "automl" / "gluon"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤
    md_files = [
        "01_installation.md",
        "02_basic_usage.md", 
        "03_advanced_configuration.md",
        "04_metrics.md",
        "05_validation.md",
        "06_production.md",
        "07_retraining.md",
        "08_best_practices.md",
        "09_examples.md",
        "10_troubleshooting.md",
        "11_apple_silicon_optimization.md",
        "12_simple_production_example.md",
        "13_advanced_production_example.md",
        "14_theory_and_fundamentals.md",
        "15_interpretability_and_explainability.md",
        "16_advanced_topics.md",
        "17_ethics_and_responsible_ai.md",
        "18_case_studies.md",
        "19_wave2_indicator_analysis.md",
        "20_schr_levels_analysis.md",
        "21_schr_short3_analysis.md",
        "22_super_system_ultimate.md",
        "23_reading_guide.md",
        "24_probability_usage_guide.md",
        "25_trading_bot_monitoring.md"
    ]
    
    fixed_count = 0
    for md_file in md_files:
        md_path = docs_dir / md_file
        if md_path.exists():
            if fix_markdown_file(md_path):
                fixed_count += 1
        else:
            print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {md_file}")
    
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}/{len(md_files)}")
    
    if fixed_count > 0:
        print("\nüîÑ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º HTML –∏ PDF —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º HTML
        from create_final_optimized_manual import create_final_html
        if create_final_html():
            print("‚úÖ HTML –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º PDF
        from create_pdf_with_playwright import create_pdf_with_playwright
        if create_pdf_with_playwright():
            print("‚úÖ PDF –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    print("\nüéâ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    return True

if __name__ == "__main__":
    main()
