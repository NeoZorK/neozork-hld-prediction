#!/usr/bin/env python3
"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —É—á–µ–±–Ω–∏–∫–∞ AutoML Gluon
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML –∫–∞–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
"""

import os
import subprocess
import sys
from pathlib import Path
import webbrowser

def create_html_with_links():
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å —Ä–∞–±–æ—á–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    
    docs_dir = Path(__file__).parent
    markdown_file = docs_dir / "AutoML_Gluon_Complete_Manual.md"
    
    if not markdown_file.exists():
        print("–§–∞–π–ª AutoML_Gluon_Complete_Manual.md –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    html_cmd = [
        'pandoc',
        str(markdown_file),
        '-o', 'AutoML_Gluon_Complete_Manual.html',
        '--toc',
        '--number-sections',
        '--standalone',
        '--css', 'style.css',
        '--metadata', 'title="AutoML Gluon - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"',
        '--metadata', 'author="AutoML Gluon Manual"',
        '--metadata', 'date="2024"',
        '--toc-depth=3',
        '--section-divs',
        '--id-prefix=section-'
    ]
    
    print("–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å —Ä–∞–±–æ—á–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏...")
    
    try:
        result = subprocess.run(html_cmd, check=True, capture_output=True, text=True)
        print("HTML —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML: {e}")
        return False

def create_enhanced_html():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ HTML —Å JavaScript –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    html_file = Path("AutoML_Gluon_Complete_Manual.html")
    
    if not html_file.exists():
        print("HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß—Ç–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞
    with open(html_file, 'r', encoding='utf-8') as f:
        html_content = f.read()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ JavaScript –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    enhanced_html = html_content.replace(
        '</head>',
        '''
        <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —è–∫–æ—Ä—è–º
        function smoothScrollTo(target) {
            const element = document.querySelector(target);
            if (element) {
                element.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
        document.addEventListener('DOMContentLoaded', function() {
            const links = document.querySelectorAll('a[href^="#"]');
            links.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = this.getAttribute('href');
                    smoothScrollTo(target);
                });
            });
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤ PDF
        function printToPDF() {
            window.print();
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—á–∞—Ç–∏
        document.addEventListener('DOMContentLoaded', function() {
            const printButton = document.createElement('button');
            printButton.innerHTML = 'üñ®Ô∏è –ü–µ—á–∞—Ç—å –≤ PDF';
            printButton.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1000;
                background: #3498db;
                color: white;
                border: none;
                padding: 10px 15px;
                border-radius: 5px;
                cursor: pointer;
                font-size: 14px;
            `;
            printButton.onclick = printToPDF;
            document.body.appendChild(printButton);
        });
        </script>
        <style>
        @media print {
            body { font-size: 12pt; line-height: 1.4; }
            h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }
            pre, code { page-break-inside: avoid; }
            a { color: #000; text-decoration: none; }
            a[href^="http"]:after { content: " (" attr(href) ")"; font-size: 0.8em; color: #666; }
        }
        </style>
        </head>
        '''
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ HTML
    enhanced_file = Path("AutoML_Gluon_Complete_Manual_Enhanced.html")
    with open(enhanced_file, 'w', encoding='utf-8') as f:
        f.write(enhanced_html)
    
    print(f"–°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π HTML: {enhanced_file}")
    return enhanced_file

def create_pdf_via_browser():
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)"""
    
    print("\n=== –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é PDF ===")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª AutoML_Gluon_Complete_Manual_Enhanced.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. –ù–∞–∂–º–∏—Ç–µ Ctrl+P (–∏–ª–∏ Cmd+P –Ω–∞ Mac)")
    print("3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–µ—á–∞—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF'")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print("   - –†–∞–∑–º–µ—Ä: A4")
    print("   - –ü–æ–ª—è: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
    print("   - –ú–∞—Å—à—Ç–∞–±: 100%")
    print("   - –í–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω")
    print("5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ AutoML_Gluon_Complete_Manual.pdf")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    try:
        enhanced_file = Path("AutoML_Gluon_Complete_Manual_Enhanced.html")
        if enhanced_file.exists():
            webbrowser.open(f"file://{enhanced_file.absolute()}")
            print(f"\n–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {enhanced_file.absolute()}")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")

def create_simple_pdf():
    """–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π PDF"""
    
    markdown_file = Path("AutoML_Gluon_Complete_Manual.md")
    
    if not markdown_file.exists():
        print("Markdown —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ pandoc
    cmd = [
        'pandoc',
        str(markdown_file),
        '-o', 'AutoML_Gluon_Complete_Manual.pdf',
        '--toc',
        '--number-sections',
        '--standalone'
    ]
    
    print("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ PDF...")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("=== –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ PDF —É—á–µ–±–Ω–∏–∫–∞ AutoML Gluon ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å —Å—Å—ã–ª–∫–∞–º–∏
    if not create_html_with_links():
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML!")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ HTML
    enhanced_file = create_enhanced_html()
    
    if enhanced_file:
        print(f"–°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª: {enhanced_file}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é PDF
        create_pdf_via_browser()
        
        return True
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π PDF
    if create_simple_pdf():
        print("PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.")
    
    return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
