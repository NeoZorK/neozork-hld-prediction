#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ markdown —Ñ–∞–π–ª–æ–≤
–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö .md —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

–ê–≤—Ç–æ—Ä: NeoZorK (Shcherbyna Rostyslav)
–î–∞—Ç–∞: 2025
"""

import os
import subprocess
import sys
from pathlib import Path
from PIL import Image
import re

def install_pillow():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pillow –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        from PIL import Image
        return True
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pillow...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'Pillow'], check=True)
        try:
            from PIL import Image
            return True
        except ImportError:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pillow")
            return False

def optimize_image(input_path, output_path, max_width=800, quality=85):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    try:
        with Image.open(input_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode in ('RGBA', 'LA', 'P'):
                img = img.convert('RGB')
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            width, height = img.size
            if width > max_width:
                new_height = int((height * max_width) / width)
                img = img.resize((max_width, new_height), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            img.save(output_path, 'PNG', optimize=True, quality=quality)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
            original_size = os.path.getsize(input_path)
            optimized_size = os.path.getsize(output_path)
            compression_ratio = (1 - optimized_size / original_size) * 100
            
            print(f"  ‚úì {os.path.basename(input_path)}: {original_size//1024}KB ‚Üí {optimized_size//1024}KB ({compression_ratio:.1f}% —Å–∂–∞—Ç–∏–µ)")
            
            return True
            
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {input_path}: {e}")
        return False

def optimize_all_images():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    print("=== –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===")
    
    if not install_pillow():
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
    project_root = Path(__file__).parent.parent.parent.parent.parent
    images_dir = project_root / "docs" / "automl" / "gluon" / "images"
    optimized_dir = images_dir / "optimized"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    optimized_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_extensions = ['.png', '.jpg', '.jpeg', '.gif']
    image_files = []
    
    for ext in image_extensions:
        image_files.extend(images_dir.glob(f'*{ext}'))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
    
    optimized_count = 0
    for img_path in image_files:
        output_path = optimized_dir / img_path.name
        
        if optimize_image(img_path, output_path):
            optimized_count += 1
    
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {optimized_count}/{len(image_files)}")
    return optimized_count > 0

def fix_markdown_images(md_file_path):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ markdown —Ñ–∞–π–ª–µ"""
    
    print(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤: {md_file_path.name}")
    
    try:
        with open(md_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        content = re.sub(
            r'!\[([^\]]*)\]\(images/([^)]+)\)',
            r'![\1](images/optimized/\2)',
            content
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        content = re.sub(
            r'!\[([^\]]*)\]\(images/optimized/([^)]+)\)',
            r'<img src="images/optimized/\2" alt="\1" style="max-width: 100%; height: auto; display: block; margin: 20px auto;">',
            content
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(md_file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"  ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {md_file_path.name}")
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {md_file_path.name}: {e}")
        return False

def fix_all_markdown_files():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤"""
    
    print("\n=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ markdown —Ñ–∞–π–ª–æ–≤ ===")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
    project_root = Path(__file__).parent.parent.parent.parent.parent
    docs_dir = project_root / "docs" / "automl" / "gluon"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤
    md_files = [
        "01_installation.md",
        "02_basic_usage.md", 
        "03_advanced_configuration.md",
        "04_metrics.md",
        "05_validation.md",
        "06_production.md",
        "07_retraining.md",
        "08_best_practices.md",
        "09_examples.md",
        "10_troubleshooting.md",
        "11_apple_silicon_optimization.md",
        "12_simple_production_example.md",
        "13_advanced_production_example.md",
        "14_theory_and_fundamentals.md",
        "15_interpretability_and_explainability.md",
        "16_advanced_topics.md",
        "17_ethics_and_responsible_ai.md",
        "18_case_studies.md",
        "19_wave2_indicator_analysis.md",
        "20_schr_levels_analysis.md",
        "21_schr_short3_analysis.md",
        "22_super_system_ultimate.md",
        "23_reading_guide.md",
        "24_probability_usage_guide.md",
        "25_trading_bot_monitoring.md"
    ]
    
    fixed_count = 0
    for md_file in md_files:
        md_path = docs_dir / md_file
        if md_path.exists():
            if fix_markdown_images(md_path):
                fixed_count += 1
        else:
            print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {md_file}")
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}/{len(md_files)}")
    return fixed_count > 0

def create_optimized_html():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ HTML"""
    
    print("\n=== –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ HTML ===")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    script_path = Path(__file__).parent / "convert_all_md_to_html_enhanced.py"
    
    try:
        result = subprocess.run([sys.executable, str(script_path)], 
                              capture_output=True, text=True, cwd=script_path.parent)
        
        if result.returncode == 0:
            print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞: {e}")
        return False

def create_optimized_pdf():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF"""
    
    print("\n=== –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF ===")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Playwright –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    script_path = Path(__file__).parent / "create_pdf_with_playwright.py"
    
    try:
        result = subprocess.run([sys.executable, str(script_path)], 
                              capture_output=True, text=True, cwd=script_path.parent)
        
        if result.returncode == 0:
            print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("–ê–≤—Ç–æ—Ä: NeoZorK (Shcherbyna Rostyslav)")
    print("–î–∞—Ç–∞: 2025")
    print("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: Ukraine, Zaporizhzhya")
    
    # –®–∞–≥ 1: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not optimize_all_images():
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return False
    
    # –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ markdown —Ñ–∞–π–ª–æ–≤
    if not fix_all_markdown_files():
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å markdown —Ñ–∞–π–ª—ã")
        return False
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ HTML
    if not create_optimized_html():
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HTML")
        return False
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF
    if not create_optimized_pdf():
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF")
        return False
    
    print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É docs/automl/gluon/")
    
    return True

if __name__ == "__main__":
    main()
