#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ markdown —Ñ–∞–π–ª–∞—Ö
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

–ê–≤—Ç–æ—Ä: NeoZorK (Shcherbyna Rostyslav)
–î–∞—Ç–∞: 2025
"""

import re
from pathlib import Path

def fix_parameter_sections(content):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è": - `3600`
    content = re.sub(
        r'(\*\*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\*\*:)\s*-\s*`([^`]+)`',
        r'\1\n  - `\2`',
        content
    )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    content = re.sub(
        r'(\*\*[^*]+\*\*:)\s*-\s*`([^`]+)`',
        r'\1\n  - `\2`',
        content
    )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
    content = re.sub(
        r'(\*\*[^*]+\*\*:)\s*-\s*\*\*([^*]+)\*\*:',
        r'\1\n  - **\2**:',
        content
    )
    
    return content

def fix_markdown_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ markdown —Ñ–∞–π–ª–∞"""
    
    print(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º: {file_path.name}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        content = fix_parameter_sections(content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"  ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path.name}")
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
    project_root = Path(__file__).parent.parent.parent.parent.parent
    docs_dir = project_root / "docs" / "automl" / "gluon"
    
    # –§–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    problem_files = [
        "01_installation.md",
        "02_basic_usage.md", 
        "03_advanced_configuration.md",
        "04_metrics.md"
    ]
    
    fixed_count = 0
    for md_file in problem_files:
        md_path = docs_dir / md_file
        if md_path.exists():
            if fix_markdown_file(md_path):
                fixed_count += 1
    
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")
    return True

if __name__ == "__main__":
    main()
