#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —É—á–µ–±–Ω–∏–∫–∞ AutoML Gluon
–°–æ–∑–¥–∞–µ—Ç PDF —Å —Ä–∞–±–æ—á–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

–ê–≤—Ç–æ—Ä: Shcherbyna Rostyslav
–î–∞—Ç–∞: 2024
"""

import os
import subprocess
import sys
from pathlib import Path
import webbrowser
import time

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pandoc
    try:
        result = subprocess.run(['pandoc', '--version'], capture_output=True, text=True)
        print(f"‚úì Pandoc: {result.stdout.split()[1]}")
    except FileNotFoundError:
        print("‚úó Pandoc –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LaTeX
    latex_engines = ['pdflatex', 'xelatex', 'lualatex']
    latex_found = False
    
    for engine in latex_engines:
        try:
            result = subprocess.run([engine, '--version'], capture_output=True, text=True)
            print(f"‚úì {engine}: –Ω–∞–π–¥–µ–Ω")
            latex_found = True
            break
        except FileNotFoundError:
            continue
    
    if not latex_found:
        print("‚úó LaTeX –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LaTeX: brew install --cask mactex")
        return False
    
    return True

def create_combined_markdown():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ Markdown —Ñ–∞–π–ª–∞"""
    
    docs_dir = Path(__file__).parent.parent.parent.parent.parent / "docs" / "automl" / "gluon"
    
    # –ü–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤
    files_order = [
        "README.md",
        "01_installation.md", 
        "02_basic_usage.md",
        "03_advanced_configuration.md",
        "04_metrics.md",
        "05_validation.md",
        "06_production.md",
        "07_retraining.md",
        "08_best_practices.md",
        "09_examples.md",
        "10_troubleshooting.md",
        "11_apple_silicon_optimization.md",
        "12_simple_production_example.md",
        "13_advanced_production_example.md",
        "14_theory_and_fundamentals.md",
        "15_interpretability_and_explainability.md",
        "16_advanced_topics.md",
        "17_ethics_and_responsible_ai.md",
        "18_case_studies.md",
        "19_wave2_indicator_analysis.md",
        "20_schr_levels_analysis.md",
        "21_schr_short3_analysis.md"
    ]
    
    combined_content = []
    
    for filename in files_order:
        file_path = docs_dir / filename
        
        if file_path.exists():
            print(f"–î–æ–±–∞–≤–ª—è–µ–º: {filename}")
            
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
                if combined_content:
                    combined_content.append("\n\n---\n\n")
                
                combined_content.append(content)
        else:
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    combined_file = docs_dir / "AutoML_Gluon_Complete_Manual.md"
    
    with open(combined_file, 'w', encoding='utf-8') as f:
        f.write(''.join(combined_content))
    
    print(f"–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {combined_file}")
    return combined_file

def create_pdf_with_latex(markdown_file):
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF —Å LaTeX"""
    
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ PDF —Å LaTeX ===")
    
    # –ö–æ–º–∞–Ω–¥–∞ pandoc —Å LaTeX
    cmd = [
        'pandoc',
        str(markdown_file),
        '-o', 'AutoML_Gluon_Complete_Manual.pdf',
        '--toc',
        '--number-sections',
        '--standalone',
        '--pdf-engine=pdflatex',
        '--variable', 'geometry:margin=2cm',
        '--variable', 'fontsize=11pt',
        '--variable', 'documentclass=book',
        '--variable', 'colorlinks=true',
        '--variable', 'linkcolor=blue',
        '--variable', 'urlcolor=blue',
        '--variable', 'toccolor=blue',
        '--variable', 'papersize=a4',
        '--variable', 'linestretch=1.2'
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úì PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å LaTeX!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ LaTeX: {e}")
        return False

def create_pdf_with_xelatex(markdown_file):
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF —Å XeLaTeX"""
    
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ PDF —Å XeLaTeX ===")
    
    cmd = [
        'pandoc',
        str(markdown_file),
        '-o', 'AutoML_Gluon_Complete_Manual.pdf',
        '--toc',
        '--number-sections',
        '--standalone',
        '--pdf-engine=xelatex',
        '--variable', 'geometry:margin=2cm',
        '--variable', 'fontsize=11pt',
        '--variable', 'documentclass=book',
        '--variable', 'colorlinks=true',
        '--variable', 'linkcolor=blue',
        '--variable', 'urlcolor=blue',
        '--variable', 'toccolor=blue',
        '--variable', 'papersize=a4',
        '--variable', 'linestretch=1.2'
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úì PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å XeLaTeX!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ XeLaTeX: {e}")
        return False

def create_html_version(markdown_file):
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML –≤–µ—Ä—Å–∏–∏"""
    
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ HTML –≤–µ—Ä—Å–∏–∏ ===")
    
    cmd = [
        'pandoc',
        str(markdown_file),
        '-o', 'AutoML_Gluon_Complete_Manual.html',
        '--toc',
        '--number-sections',
        '--standalone',
        '--css', 'style.css',
        '--metadata', 'title="AutoML Gluon - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"',
        '--metadata', 'author="AutoML Gluon Manual"',
        '--metadata', 'date="2024"',
        '--toc-depth=3',
        '--section-divs',
        '--id-prefix=section-'
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úì HTML —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ HTML: {e}")
        return False

def create_enhanced_html():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ HTML —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    
    html_file = Path("AutoML_Gluon_Complete_Manual.html")
    
    if not html_file.exists():
        print("HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß—Ç–µ–Ω–∏–µ HTML
    with open(html_file, 'r', encoding='utf-8') as f:
        html_content = f.read()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ JavaScript –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    enhanced_html = html_content.replace(
        '</head>',
        '''
        <script>
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è–∫–æ—Ä—è–º
        function smoothScrollTo(target) {
            const element = document.querySelector(target);
            if (element) {
                element.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
        document.addEventListener('DOMContentLoaded', function() {
            const links = document.querySelectorAll('a[href^="#"]');
            links.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = this.getAttribute('href');
                    smoothScrollTo(target);
                });
            });
        });
        
        // –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –≤ PDF
        function printToPDF() {
            window.print();
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—á–∞—Ç–∏
        document.addEventListener('DOMContentLoaded', function() {
            const printButton = document.createElement('button');
            printButton.innerHTML = 'üñ®Ô∏è –ü–µ—á–∞—Ç—å –≤ PDF';
            printButton.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1000;
                background: #3498db;
                color: white;
                border: none;
                padding: 10px 15px;
                border-radius: 5px;
                cursor: pointer;
                font-size: 14px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            `;
            printButton.onclick = printToPDF;
            document.body.appendChild(printButton);
        });
        </script>
        <style>
        @media print {
            body { font-size: 12pt; line-height: 1.4; }
            h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }
            pre, code { page-break-inside: avoid; }
            a { color: #000; text-decoration: none; }
            a[href^="http"]:after { content: " (" attr(href) ")"; font-size: 0.8em; color: #666; }
        }
        </style>
        </head>
        '''
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ HTML
    enhanced_file = Path("AutoML_Gluon_Complete_Manual_Enhanced.html")
    with open(enhanced_file, 'w', encoding='utf-8') as f:
        f.write(enhanced_html)
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π HTML: {enhanced_file}")
    return enhanced_file

def open_in_browser(html_file):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ HTML –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    
    try:
        webbrowser.open(f"file://{html_file.absolute()}")
        print(f"‚úì HTML –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {html_file.absolute()}")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ PDF —É—á–µ–±–Ω–∏–∫–∞ AutoML Gluon ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ Markdown
    markdown_file = create_combined_markdown()
    
    if not markdown_file.exists():
        print("‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        return False
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF —Å LaTeX
    if create_pdf_with_latex(markdown_file):
        print("\nüéâ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å LaTeX!")
        return True
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF —Å XeLaTeX
    if create_pdf_with_xelatex(markdown_file):
        print("\nüéâ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å XeLaTeX!")
        return True
    
    # –°–æ–∑–¥–∞–Ω–∏–µ HTML –≤–µ—Ä—Å–∏–∏
    if create_html_version(markdown_file):
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ HTML
        enhanced_file = create_enhanced_html()
        
        if enhanced_file:
            print("\nüìÑ HTML –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\n=== –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é PDF ===")
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª AutoML_Gluon_Complete_Manual_Enhanced.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print("2. –ù–∞–∂–º–∏—Ç–µ Ctrl+P (–∏–ª–∏ Cmd+P –Ω–∞ Mac)")
            print("3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–µ—á–∞—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF'")
            print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print("   - –†–∞–∑–º–µ—Ä: A4")
            print("   - –ü–æ–ª—è: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
            print("   - –ú–∞—Å—à—Ç–∞–±: 100%")
            print("   - –í–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω")
            print("5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ AutoML_Gluon_Complete_Manual.pdf")
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            open_in_browser(enhanced_file)
            
            return True
    
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")
    
    return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
