#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple MCP Server for GitHub Copilot connection
This is a minimal implementation that handles stdio interface for GitHub Copilot
"""

import json
import sys
import traceback
import logging
import threading
import time
from typing import Dict, Any, Optional, List
import os

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
logs_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "logs")
if not os.path.exists(logs_dir):
    try:
        os.makedirs(logs_dir)
        print(f"Created logs directory: {logs_dir}")
    except Exception as e:
        print(f"Error creating logs directory: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(logs_dir, "mcp_server.log"), mode='a'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs
        logging.StreamHandler(sys.stdout)      # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ stdout –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    ]
)
logger = logging.getLogger("simple_mcp")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
console_handler = logging.StreamHandler(sys.stderr)
console_handler.setLevel(logging.DEBUG)
console_formatter = logging.Formatter('üîç CONSOLE: %(message)s')
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
logger.info("========================")
logger.info("MCP Server starting up at %s", time.strftime("%Y-%m-%d %H:%M:%S"))
logger.info("Working directory: %s", os.getcwd())
logger.info("Script location: %s", os.path.abspath(__file__))
logger.info("========================")

# –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
class ColoredFormatter(logging.Formatter):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤"""
    COLORS = {
        'DEBUG': '\033[94m',  # —Å–∏–Ω–∏–π
        'INFO': '\033[92m',   # –∑–µ–ª–µ–Ω—ã–π
        'WARNING': '\033[93m', # –∂–µ–ª—Ç—ã–π
        'ERROR': '\033[91m',   # –∫—Ä–∞—Å–Ω—ã–π
        'CRITICAL': '\033[91m\033[1m', # –∫—Ä–∞—Å–Ω—ã–π –∂–∏—Ä–Ω—ã–π
        'RESET': '\033[0m'    # —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
    }

    def format(self, record):
        log_message = super().format(record)
        if hasattr(record, 'levelname') and record.levelname in self.COLORS:
            return f"{self.COLORS[record.levelname]}{log_message}{self.COLORS['RESET']}"
        return log_message

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏, –µ—Å–ª–∏ –Ω–µ Windows
if os.name != 'nt':
    for handler in logger.handlers:
        if isinstance(handler, logging.StreamHandler):
            if handler.stream == sys.stdout:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
                handler.setFormatter(ColoredFormatter('üìù %(asctime)s - %(levelname)s - %(message)s'))

class SimpleMCPServer:
    """
    –ü—Ä–æ—Å—Ç–æ–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è GitHub Copilot —á–µ—Ä–µ–∑ stdio
    """

    def __init__(self):
        self.logger = logger
        self.logger.info("Simple MCP Server initialized with stdio interface")
        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.buffer = b""
        self.content_length = None
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.documents = {}
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.next_id = 1
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.connection_attempts = 0
        self.successful_connections = 0
        self.request_count = 0
        self.start_time = time.time()
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö
        self.client_info = {}
        self.protocol_versions = set()

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç GitHub Copilot —á–µ—Ä–µ–∑ stdio
        """
        try:
            self.logger.info("MCP Server started with stdio interface")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –∏–∑ stdin –∏ –∑–∞–ø–∏—Å–∏ –≤ stdout
            self._handle_stdio()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ MCP —Å–µ—Ä–≤–µ—Ä–µ: {str(e)}")
            self.logger.error(traceback.format_exc())
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self._send_notification("window/showMessage", {
                "type": 1,  # Error
                "message": f"MCP Server Error: {str(e)}"
            })

    def _handle_stdio(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥/–≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        """
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–æ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è stdin –∏ stdout –≤ Windows
        if os.name == 'nt':
            import msvcrt
            msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
            msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while True:
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ stdin
            try:
                data = sys.stdin.buffer.read1(4096)
                if not data:
                    self.logger.info("End of stdin stream, exiting")
                    break

                self.buffer += data

                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                data_preview = str(data)
                if len(data_preview) > 200:
                    data_preview = data_preview[:200] + "... (truncated)"

                self.logger.info(f"üì• Received {len(data)} bytes, buffer size: {len(self.buffer)}")
                self.logger.info(f"üìÑ Received data content: {data_preview}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞ –æ–Ω–∏ –µ—Å—Ç—å –≤ –±—É—Ñ–µ—Ä–µ
                self._process_buffer()

            except Exception as e:
                self.logger.error(f"Error reading from stdin: {str(e)}")
                self.logger.error(traceback.format_exc())
                break

    def _process_buffer(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        while True:
            self.logger.debug(f"Processing buffer (size: {len(self.buffer)}): {self.buffer[:100]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –≤ –±—É—Ñ–µ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è JSON –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å GitHub Copilot –∏–ª–∏ PyCharm, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å \n –≤ –∫–æ–Ω—Ü–µ
            if self.content_length is None and self.buffer.find(b"\n") > -1:
                newline_pos = self.buffer.find(b"\n")
                possible_json = self.buffer[:newline_pos].strip()

                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ JSON
                    decoded_json = possible_json.decode('utf-8')
                    if decoded_json.startswith('{') and decoded_json.endswith('}'):
                        self.logger.debug(f"Found possible JSON message without headers: {decoded_json}")

                        request = json.loads(decoded_json)
                        response = self._handle_request(request)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if response:
                            self._send_response(response)

                        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
                        self.buffer = self.buffer[newline_pos + 1:]
                        continue
                except (UnicodeDecodeError, json.JSONDecodeError) as e:
                    self.logger.debug(f"Not a valid JSON message: {str(e)}, continuing with standard parsing")

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            if self.content_length is None:
                # –ò—â–µ–º –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –æ—Ç–¥–µ–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç —Ç–µ–ª–∞
                header_end = self.buffer.find(b"\r\n\r\n")
                if header_end == -1:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, PyCharm –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ \n\n –≤–º–µ—Å—Ç–æ \r\n\r\n
                    header_end = self.buffer.find(b"\n\n")
                    if header_end == -1:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                        break

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = self.buffer[:header_end].decode('utf-8', errors='replace')
                self.logger.debug(f"Found headers: {headers}")

                # –ò—â–µ–º Content-Length
                for line in headers.split("\r\n" if "\r\n" in headers else "\n"):
                    if line.lower().startswith("content-length:"):
                        self.content_length = int(line.split(":", 1)[1].strip())
                        self.logger.debug(f"Found Content-Length: {self.content_length}")
                        break

                # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
                delim_len = 4 if b"\r\n\r\n" in self.buffer[:header_end+4] else 2  # 4 = len("\r\n\r\n"), 2 = len("\n\n")
                self.buffer = self.buffer[header_end + delim_len:]
                self.logger.debug(f"Removed headers, buffer size now: {len(self.buffer)}")

            # –ï—Å–ª–∏ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.content_length is not None and len(self.buffer) >= self.content_length:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_body = self.buffer[:self.content_length].decode('utf-8', errors='replace')
                self.logger.debug(f"Extracted message body: {message_body}")
                self.buffer = self.buffer[self.content_length:]
                self.logger.debug(f"Remaining buffer size: {len(self.buffer)}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                try:
                    request = json.loads(message_body)
                    response = self._handle_request(request)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    if response:
                        self._send_response(response)
                except json.JSONDecodeError as e:
                    self.logger.error(f"Failed to parse JSON: {message_body}, error: {str(e)}")
                except Exception as e:
                    self.logger.error(f"Error handling request: {str(e)}")
                    self.logger.error(traceback.format_exc())
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –±—ã–ª ID –∑–∞–ø—Ä–æ—Å–∞
                    if 'request' in locals() and isinstance(request, dict) and "id" in request:
                        self._send_error(request["id"], -32603, f"Internal error: {str(e)}")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º content_length –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.content_length = None
            else:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –±–æ–ª—å—à–µ
                break

    def _handle_request(self, request: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç GitHub Copilot
        """
        if not request:
            return {}

        self.request_count += 1
        current_time = time.time()
        uptime = current_time - self.start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º (–±–µ–∑ ID)
        if "id" not in request:
            method = request.get("method", "")
            self.logger.info(f"Received notification: {method} [req #{self.request_count}, uptime: {int(uptime)}s]")
            self.logger.debug(f"Full notification: {json.dumps(request)}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if method == "textDocument/didOpen":
                params = request.get("params", {})
                text_document = params.get("textDocument", {})
                uri = text_document.get("uri", "")
                if uri:
                    self.documents[uri] = text_document.get("text", "")
                    language_id = text_document.get("languageId", "unknown")
                    self.logger.info(f"Document opened: {uri} (Language: {language_id}, Size: {len(self.documents[uri])} chars)")

            elif method == "textDocument/didChange":
                params = request.get("params", {})
                text_document = params.get("textDocument", {})
                uri = text_document.get("uri", "")
                changes = params.get("contentChanges", [])
                if uri and uri in self.documents and changes:
                    # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    old_size = len(self.documents[uri])
                    self.documents[uri] = changes[-1].get("text", self.documents[uri])
                    new_size = len(self.documents[uri])
                    change_size = new_size - old_size
                    self.logger.info(f"Document changed: {uri} (Size delta: {'+' if change_size >= 0 else ''}{change_size} chars)")

            elif method == "textDocument/didClose":
                params = request.get("params", {})
                text_document = params.get("textDocument", {})
                uri = text_document.get("uri", "")
                if uri and uri in self.documents:
                    self.logger.info(f"Document closed: {uri} (Final size: {len(self.documents[uri])} chars)")
                    del self.documents[uri]

            # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            return None

        method = request.get("method", "")
        message_id = request.get("id", 0)

        self.logger.info(f"Received request: {method} (ID: {message_id}) [req #{self.request_count}, uptime: {int(uptime)}s]")
        self.logger.debug(f"Full request: {json.dumps(request)}")

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ initialize
        if method == "initialize":
            self.connection_attempts += 1
            params = request.get("params", {})
            client_info = params.get("clientInfo", {})
            client_name = client_info.get("name", "Unknown Client")
            client_version = client_info.get("version", "Unknown Version")
            protocol_version = params.get("protocolVersion", "Unknown")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ
            client_key = f"{client_name}_{client_version}"
            self.client_info[client_key] = {
                "name": client_name,
                "version": client_version,
                "last_connection": time.time(),
                "protocol": protocol_version,
                "capabilities": params.get("capabilities", {})
            }
            self.protocol_versions.add(protocol_version)

            self.logger.info(f"üîå CONNECTION ATTEMPT #{self.connection_attempts} from {client_name} v{client_version}")
            self.logger.info(f"Protocol version: {protocol_version}")
            self.logger.info(f"Client capabilities: {json.dumps(params.get('capabilities', {}), indent=2)}")

            return {
                "jsonrpc": "2.0",
                "id": message_id,
                "result": {
                    "capabilities": {
                        "completionProvider": {
                            "triggerCharacters": [".", " ", "\t", "(", "[", ",", ":"]
                        },
                        "textDocumentSync": {
                            "openClose": True,
                            "change": 1,  # Full document synchronization
                            "willSave": False,
                            "willSaveWaitUntil": False,
                            "save": {
                                "includeText": False
                            }
                        },
                        "hoverProvider": True,
                        "definitionProvider": True,
                        "referencesProvider": True,
                        "documentSymbolProvider": True,
                        "workspaceSymbolProvider": True,
                        "codeActionProvider": {
                            "codeActionKinds": ["quickfix", "refactor"]
                        },
                        "executeCommandProvider": {
                            "commands": ["neozork.analyzeData"]
                        }
                    },
                    "serverInfo": {
                        "name": "NeoZorK HLD Prediction MCP Server",
                        "version": "1.0.0"
                    }
                }
            }

        # –û—Ç–≤–µ—Ç –Ω–∞ initialized
        elif method == "initialized":
            self.successful_connections += 1
            self.logger.info(f"‚úÖ CONNECTION SUCCESSFUL #{self.successful_connections} (Total attempts: {self.connection_attempts})")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            self._send_notification("window/showMessage", {
                "type": 3,  # Info
                "message": f"MCP Server is ready and connected (Connection #{self.successful_connections})"
            })
            return {
                "jsonrpc": "2.0",
                "id": message_id,
                "result": None
            }

        # –û—Ç–≤–µ—Ç –Ω–∞ shutdown
        elif method == "shutdown":
            self.logger.info(f"Received shutdown request after {int(uptime)}s uptime")
            self.logger.info(f"Connection stats: {self.successful_connections} successful connections out of {self.connection_attempts} attempts")
            self.logger.info(f"Processed {self.request_count} requests")
            return {
                "jsonrpc": "2.0",
                "id": message_id,
                "result": None
            }

        # –û—Ç–≤–µ—Ç –Ω–∞ exit
        elif method == "exit":
            self.logger.info(f"Received exit request after {int(uptime)}s uptime")
            self.logger.info(f"Final stats: {self.successful_connections}/{self.connection_attempts} connections, {self.request_count} requests processed")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            response = {
                "jsonrpc": "2.0",
                "id": message_id,
                "result": None
            }
            self._send_response(response)
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            sys.exit(0)
            return None  # –≠—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏

    def _send_response(self, response: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ stdout
        """
        if not response:
            return

        response_str = json.dumps(response)
        response_bytes = response_str.encode('utf-8')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        header = f"Content-Length: {len(response_bytes)}\r\n\r\n".encode('utf-8')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ stdout
        try:
            sys.stdout.buffer.write(header)
            sys.stdout.buffer.write(response_bytes)
            sys.stdout.buffer.flush()

            self.logger.info(f"Sent response for ID: {response.get('id', 0)}")
            self.logger.debug(f"Full response: {response_str}")
        except Exception as e:
            self.logger.error(f"Error sending response: {str(e)}")
            self.logger.error(traceback.format_exc())

    def _send_notification(self, method: str, params: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ ID) —Å–µ—Ä–≤–µ—Ä—É
        """
        notification = {
            "jsonrpc": "2.0",
            "method": method,
            "params": params
        }

        notification_str = json.dumps(notification)
        notification_bytes = notification_str.encode('utf-8')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        header = f"Content-Length: {len(notification_bytes)}\r\n\r\n".encode('utf-8')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ stdout
        try:
            sys.stdout.buffer.write(header)
            sys.stdout.buffer.write(notification_bytes)
            sys.stdout.buffer.flush()

            self.logger.info(f"Sent notification: {method}")
            self.logger.debug(f"Full notification: {notification_str}")
        except Exception as e:
            self.logger.error(f"Error sending notification: {str(e)}")
            self.logger.error(traceback.format_exc())

    def _send_error(self, id: int, code: int, message: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        """
        error_response = {
            "jsonrpc": "2.0",
            "id": id,
            "error": {
                "code": code,
                "message": message
            }
        }

        self._send_response(error_response)


if __name__ == "__main__":
    server = SimpleMCPServer()
    server.run()
