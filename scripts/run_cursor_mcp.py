#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Cursor MCP Server
"""

import sys
import json
import time
import subprocess
import signal
import os
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from cursor_mcp_server import CursorMCPServer

class CursorMCPServerRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self, project_root: Path = None):
        self.project_root = project_root or Path(__file__).parent.parent
        self.server_process: Optional[subprocess.Popen] = None
        self.server: Optional[CursorMCPServer] = None
        
    def start_server(self, mode: str = "test") -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            if mode == "test":
                # –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ STDIO)
                self.server = CursorMCPServer(project_root=self.project_root)
                print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
                return True
            elif mode == "stdio":
                # –ó–∞–ø—É—Å–∫ –≤ STDIO —Ä–µ–∂–∏–º–µ –¥–ª—è Cursor IDE
                cmd = [sys.executable, "cursor_mcp_server.py"]
                self.server_process = subprocess.Popen(
                    cmd,
                    cwd=self.project_root,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ STDIO —Ä–µ–∂–∏–º–µ")
                return True
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.server_process:
                self.server_process.terminate()
                self.server_process.wait(timeout=5)
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            elif self.server:
                self.server.running = False
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def test_server_functionality(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.server:
            return {"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
        
        results = {}
        
        try:
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
            init_result = self.server._handle_initialize(None, {})
            results["initialize"] = {
                "success": True,
                "capabilities": init_result.get("capabilities", {}),
                "serverInfo": init_result.get("serverInfo", {})
            }
            
            # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ...")
            project_info = self.server._handle_project_info(None, {})
            results["project_info"] = {
                "success": True,
                "data": project_info
            }
            
            # –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            financial_data = self.server._handle_financial_data(None, {})
            results["financial_data"] = {
                "success": True,
                "data": financial_data
            }
            
            # –¢–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
            indicators = self.server._handle_indicators(None, {})
            results["indicators"] = {
                "success": True,
                "data": indicators
            }
            
            # –¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è...")
            completion_params = {
                "textDocument": {"uri": "file://test.py"},
                "position": {"line": 0, "character": 0}
            }
            completion_result = self.server._handle_completion(None, completion_params)
            results["completion"] = {
                "success": True,
                "items_count": len(completion_result.get("items", [])),
                "is_incomplete": completion_result.get("isIncomplete", False)
            }
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞...")
            search_result = self.server._handle_code_search(None, {"query": "calculate"})
            results["code_search"] = {
                "success": True,
                "data": search_result
            }
            
            # –¢–µ—Å—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤...")
            snippets = self.server._handle_snippets(None, {})
            results["snippets"] = {
                "success": True,
                "count": len(snippets)
            }
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
            analysis = self.server._handle_analysis(None, {})
            results["analysis"] = {
                "success": True,
                "data": analysis
            }
            
        except Exception as e:
            results["error"] = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        return results
    
    def send_test_message(self, method: str, params: Dict = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä—É"""
        if not self.server_process:
            return {"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ STDIO —Ä–µ–∂–∏–º–µ"}
        
        try:
            message = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": method,
                "params": params or {}
            }
            
            message_str = json.dumps(message)
            content_length = len(message_str)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ LSP
            lsp_message = f"Content-Length: {content_length}\r\n\r\n{message_str}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.server_process.stdin.write(lsp_message)
            self.server_process.stdin.flush()
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            response = self.server_process.stdout.readline()
            if response.startswith("Content-Length:"):
                content_length = int(response.split(":")[1].strip())
                self.server_process.stdout.readline()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                response_body = self.server_process.stdout.read(content_length)
                return json.loads(response_body)
            else:
                return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"}
                
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"}
    
    def run_performance_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.server:
            return {"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
        
        results = {}
        
        try:
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            start_time = time.time()
            self.server._handle_initialize(None, {})
            init_time = time.time() - start_time
            results["initialization_time"] = init_time
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            start_time = time.time()
            for _ in range(10):
                self.server._handle_completion(None, {
                    "textDocument": {"uri": "file://test.py"},
                    "position": {"line": 0, "character": 0}
                })
            completion_time = (time.time() - start_time) / 10
            results["completion_time"] = completion_time
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞
            start_time = time.time()
            for _ in range(10):
                self.server._handle_code_search(None, {"query": "calculate"})
            search_time = (time.time() - start_time) / 10
            results["search_time"] = search_time
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            project_stats = self.server._handle_analysis(None, {})
            results["project_stats"] = project_stats
            
        except Exception as e:
            results["error"] = str(e)
        
        return results
    
    def generate_report(self, test_results: Dict[str, Any], performance_results: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report = []
        report.append("# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Cursor MCP Server")
        report.append("")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        report.append("## –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        report.append("")
        
        for test_name, result in test_results.items():
            if test_name == "error":
                report.append(f"‚ùå **–û—à–∏–±–∫–∞**: {result}")
            else:
                status = "‚úÖ" if result.get("success", False) else "‚ùå"
                report.append(f"{status} **{test_name}**: {'–£—Å–ø–µ—à–Ω–æ' if result.get('success', False) else '–û—à–∏–±–∫–∞'}")
        
        report.append("")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        report.append("## –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        report.append("")
        
        if "error" in performance_results:
            report.append(f"‚ùå **–û—à–∏–±–∫–∞**: {performance_results['error']}")
        else:
            report.append(f"‚è±Ô∏è **–í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏**: {performance_results.get('initialization_time', 0):.3f}—Å")
            report.append(f"‚ö° **–í—Ä–µ–º—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è**: {performance_results.get('completion_time', 0):.3f}—Å")
            report.append(f"üîç **–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞**: {performance_results.get('search_time', 0):.3f}—Å")
            
            if "project_stats" in performance_results:
                stats = performance_results["project_stats"]
                report.append("")
                report.append("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
                report.append(f"- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤**: {stats.get('project_stats', {}).get('total_files', 0)}")
                report.append(f"- **Python —Ñ–∞–π–ª–æ–≤**: {stats.get('project_stats', {}).get('python_files', 0)}")
                report.append(f"- **–§—É–Ω–∫—Ü–∏–π**: {stats.get('code_analysis', {}).get('functions', 0)}")
                report.append(f"- **–ö–ª–∞—Å—Å–æ–≤**: {stats.get('code_analysis', {}).get('classes', 0)}")
                report.append(f"- **–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤**: {stats.get('code_analysis', {}).get('indicators', 0)}")
        
        return "\n".join(report)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cursor MCP Server")
    parser.add_argument("--mode", choices=["test", "stdio", "both"], default="test",
                       help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    parser.add_argument("--performance", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--report", action="store_true", help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
    parser.add_argument("--config", type=str, help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É")
    
    args = parser.parse_args()
    
    runner = CursorMCPServerRunner()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        if args.mode in ["test", "both"]:
            if not runner.start_server("test"):
                sys.exit(1)
        
        if args.mode in ["stdio", "both"]:
            if not runner.start_server("stdio"):
                sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        if args.test:
            print("üß™ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
            test_results = runner.test_server_functionality()
            
            if args.performance:
                print("‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
                performance_results = runner.run_performance_test()
            else:
                performance_results = {}
            
            if args.report:
                report = runner.generate_report(test_results, performance_results)
                print("\n" + "="*50)
                print(report)
                print("="*50)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
                report_file = Path("logs/mcp_test_report.md")
                report_file.parent.mkdir(exist_ok=True)
                report_file.write_text(report, encoding='utf-8')
                print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
            else:
                # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                print("\nüìä –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for test_name, result in test_results.items():
                    if test_name != "error":
                        status = "‚úÖ" if result.get("success", False) else "‚ùå"
                        print(f"  {status} {test_name}")
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        if not args.test and args.mode == "test":
            print("\nüéØ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                pass
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        runner.stop_server()

if __name__ == "__main__":
    main() 