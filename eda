#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# EDA (Exploratory Data Analysis) Script
# 
# This script provides various data analysis and quality check tools
# for the Neozork HLD Prediction project.

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Add project root to Python path
export PYTHONPATH="${PROJECT_ROOT}:${PYTHONPATH}"

# Function to detect environment
detect_environment() {
    if [ -f "/.dockerenv" ] || [ -f "/app/.dockerenv" ]; then
        echo "Docker environment detected"
        return 0
    elif command -v uv >/dev/null 2>&1; then
        echo "UV environment detected"
        return 1
    else
        echo "Native Python environment detected"
        return 2
    fi
}

# Function to run Python command
run_python() {
    local env_type=$1
    shift
    
    case $env_type in
        0)  # Docker
            python "$@"
            ;;
        1)  # UV
            uv run python "$@"
            ;;
        2)  # Native
            python "$@"
            ;;
    esac
}

# Main script logic
echo "EDA Batch Check Tool"
echo "===================="

# Detect environment
detect_environment
env_type=$?

# Change to project root
cd "$PROJECT_ROOT"

# Add script directory to PATH
echo "Adding $SCRIPT_DIR to PATH"
export PATH="$SCRIPT_DIR:$PATH"

# Parse arguments
case "${1:---help}" in
    --help|-h)
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --help                    Show this help message"
        echo "  --data-quality-checks     Run data quality checks"
        echo "  --nan-check              Check for NaN values in data"
        echo "  --fix-files              Fix common file issues"
        echo "  --folder-stats           Show folder statistics"
        echo "  --file-info              Show file information"
        echo "  --version                Show version information"
        echo ""
        echo "Environment:"
        echo "  Automatically detects Docker, UV, or native Python environment"
        echo ""
        exit 0
        ;;
    --data-quality-checks)
        echo "Running data quality checks..."
        run_python $env_type -m src.eda.data_quality
        ;;
    --nan-check)
        echo "Checking for NaN values..."
        run_python $env_type -c "
import pandas as pd
import os
from pathlib import Path

def check_nan_values():
    data_dir = Path('data')
    if not data_dir.exists():
        print('Data directory not found')
        return
    
    for file_path in data_dir.rglob('*.csv'):
        try:
            df = pd.read_csv(file_path)
            nan_count = df.isna().sum().sum()
            if nan_count > 0:
                print(f'{file_path}: {nan_count} NaN values found')
            else:
                print(f'{file_path}: No NaN values')
        except Exception as e:
            print(f'Error reading {file_path}: {e}')

check_nan_values()
"
        ;;
    --fix-files)
        echo "Fixing common file issues..."
        run_python $env_type -c "
import os
from pathlib import Path

def fix_files():
    # Fix permissions
    for script in ['eda', 'nz']:
        script_path = Path(script)
        if script_path.exists():
            script_path.chmod(0o755)
            print(f'Fixed permissions for {script}')
    
    # Create missing directories
    dirs = ['logs', 'data', 'results']
    for dir_name in dirs:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(parents=True)
            print(f'Created directory: {dir_name}')

fix_files()
"
        ;;
    --folder-stats)
        echo "Folder statistics:"
        run_python $env_type -c "
from pathlib import Path
import os

def get_folder_stats():
    folders = ['data', 'logs', 'results', 'src', 'tests']
    for folder in folders:
        folder_path = Path(folder)
        if folder_path.exists():
            file_count = len(list(folder_path.rglob('*')))
            size = sum(f.stat().st_size for f in folder_path.rglob('*') if f.is_file())
            print(f'{folder}: {file_count} files, {size/1024:.1f} KB')
        else:
            print(f'{folder}: Not found')

get_folder_stats()
"
        ;;
    --file-info)
        echo "File information:"
        run_python $env_type -c "
from pathlib import Path
import os
from datetime import datetime

def get_file_info():
    important_files = [
        'run_analysis.py',
        'requirements.txt',
        'pyproject.toml',
        'Dockerfile',
        'docker-compose.yml'
    ]
    
    for file_name in important_files:
        file_path = Path(file_name)
        if file_path.exists():
            stat = file_path.stat()
            size = stat.st_size
            modified = datetime.fromtimestamp(stat.st_mtime)
            print(f'{file_name}: {size} bytes, modified {modified}')
        else:
            print(f'{file_name}: Not found')

get_file_info()
"
        ;;
    --version)
        echo "EDA Script Version 1.0.0"
        echo "Neozork HLD Prediction Project"
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac

exit 0
