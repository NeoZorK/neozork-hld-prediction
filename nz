#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# NZ (Neozork) Script
# 
# This script provides main functionality for the Neozork HLD Prediction project.

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Fix: PROJECT_ROOT should be the same as SCRIPT_DIR since the script is in project root
PROJECT_ROOT="$SCRIPT_DIR"

# Add project root to Python path
export PYTHONPATH="${PROJECT_ROOT}:${PYTHONPATH}"

# Function to detect environment
detect_environment() {
    if [ -f "/.dockerenv" ] || [ -f "/app/.dockerenv" ]; then
        echo "Docker environment detected"
        return 0
    elif command -v uv >/dev/null 2>&1; then
        echo "UV environment detected"
        return 1
    else
        echo "Native Python environment detected"
        return 2
    fi
}

# Function to run Python command
run_python() {
    local env_type=$1
    shift
    
    case $env_type in
        0)  # Docker
            python "$@"
            ;;
        1)  # UV
            uv run python "$@"
            ;;
        2)  # Native
            python "$@"
            ;;
    esac
}

# Main script logic
echo "Neozork HLD Prediction Tool"
echo "==========================="

# Detect environment
detect_environment
env_type=$?

# Change to project root
cd "$PROJECT_ROOT"

# Add script directory to PATH
echo "Adding $SCRIPT_DIR to PATH"
export PATH="$SCRIPT_DIR:$PATH"

# Parse arguments
if [ $# -eq 0 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  demo                    Run demo analysis"
    echo "  test                    Run tests"
    echo "  analyze                 Run analysis"
    echo "  plot                    Generate plots"
    echo "  data                    Data operations"
    echo "  version                 Show version information"
    echo ""
    echo "Options:"
    echo "  --help, -h              Show this help message"
    echo "  --version               Show version with cool logo"
    echo "  --verbose, -v           Verbose output"
    echo ""
    echo "Examples:"
    echo "  $0 demo                 Run demo"
    echo "  $0 test                 Run all tests"
    echo "  $0 analyze --csv-file data/test.csv"
    echo "  $0 --version            Show version with logo"
    echo ""
    exit 0
fi

# Handle --version flag
if [ "$1" = "--version" ]; then
    run_python $env_type run_analysis.py --version
    exit 0
fi

case "$1" in
    demo)
        echo "Running demo analysis..."
        run_python $env_type run_analysis.py demo
        ;;
    test)
        echo "Running tests..."
        if [ "$env_type" -eq 1 ]; then
            uv run pytest tests/ -v
        else
            run_python $env_type -m pytest tests/ -v
        fi
        ;;
    analyze)
        shift
        echo "Running analysis..."
        run_python $env_type run_analysis.py "$@"
        ;;
    plot)
        shift
        echo "Generating plots..."
        run_python $env_type -m src.plotting.fast_plot "$@"
        ;;
    data)
        shift
        echo "Data operations..."
        case "${1:---help}" in
            --help|-h)
                echo "Data operations:"
                echo "  $0 data list              List available data files"
                echo "  $0 data info <file>       Show file information"
                echo "  $0 data validate <file>   Validate data file"
                ;;
            list)
                run_python $env_type -c "
from pathlib import Path
import os

def list_data_files():
    data_dir = Path('data')
    if not data_dir.exists():
        print('Data directory not found')
        return
    
    print('Available data files:')
    for file_path in data_dir.rglob('*'):
        if file_path.is_file():
            size = file_path.stat().st_size
            print(f'  {file_path.relative_to(data_dir)} ({size} bytes)')

list_data_files()
"
                ;;
            info)
                if [ -z "$2" ]; then
                    echo "Error: Please specify a file name"
                    exit 1
                fi
                run_python $env_type -c "
import pandas as pd
from pathlib import Path

def show_file_info(file_path):
    path = Path('data') / '$2'
    if not path.exists():
        print(f'File not found: {path}')
        return
    
    try:
        if path.suffix.lower() == '.csv':
            df = pd.read_csv(path)
        elif path.suffix.lower() == '.parquet':
            df = pd.read_parquet(path)
        else:
            print(f'Unsupported file type: {path.suffix}')
            return
        
        print(f'File: {path}')
        print(f'Shape: {df.shape}')
        print(f'Columns: {list(df.columns)}')
        print(f'Data types:')
        for col, dtype in df.dtypes.items():
            print(f'  {col}: {dtype}')
        
        if len(df) > 0:
            print(f'\\nFirst few rows:')
            print(df.head())
    
    except Exception as e:
        print(f'Error reading file: {e}')

show_file_info('$2')
"
                ;;
            validate)
                if [ -z "$2" ]; then
                    echo "Error: Please specify a file name"
                    exit 1
                fi
                run_python $env_type -c "
import pandas as pd
from pathlib import Path

def validate_file(file_path):
    path = Path('data') / '$2'
    if not path.exists():
        print(f'File not found: {path}')
        return
    
    try:
        if path.suffix.lower() == '.csv':
            df = pd.read_csv(path)
        elif path.suffix.lower() == '.parquet':
            df = pd.read_parquet(path)
        else:
            print(f'Unsupported file type: {path.suffix}')
            return
        
        print(f'Validating: {path}')
        print(f'✓ File can be read')
        print(f'✓ Shape: {df.shape}')
        print(f'✓ Columns: {len(df.columns)}')
        
        # Check for NaN values
        nan_count = df.isna().sum().sum()
        if nan_count == 0:
            print(f'✓ No NaN values found')
        else:
            print(f'⚠ {nan_count} NaN values found')
        
        # Check for duplicates
        dup_count = df.duplicated().sum()
        if dup_count == 0:
            print(f'✓ No duplicate rows found')
        else:
            print(f'⚠ {dup_count} duplicate rows found')
        
        print(f'✓ Validation complete')
    
    except Exception as e:
        print(f'✗ Validation failed: {e}')

validate_file('$2')
"
                ;;
            *)
                echo "Unknown data operation: $1"
                echo "Use '$0 data --help' for usage information"
                exit 1
                ;;
        esac
        ;;
    version)
        echo "Neozork HLD Prediction Tool Version 1.0.0"
        echo "Project: Neozork HLD Prediction"
        echo "Python: $(python --version 2>&1)"
        if [ "$env_type" -eq 1 ]; then
            echo "UV: $(uv --version 2>&1)"
        fi
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac

exit 0
