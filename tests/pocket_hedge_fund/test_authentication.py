"""
Test Authentication System

This module tests the authentication and authorization functionality
for the Pocket Hedge Fund system.
"""

import pytest
import asyncio
import secrets
from datetime import datetime, timedelta

# Add project root to path
import sys
from pathlib import Path
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from src.pocket_hedge_fund.auth.auth_manager import (
    AuthenticationManager, AuthConfig, PasswordManager, MFAManager, JWTManager
)


class TestPasswordManager:
    """Test password management functionality."""
    
    def test_hash_password(self):
        """Test password hashing."""
        password = "test_password_123"
        hashed = PasswordManager.hash_password(password)
        
        assert hashed != password
        assert len(hashed) > 0
        assert hashed.startswith('$2b$')
    
    def test_verify_password(self):
        """Test password verification."""
        password = "test_password_123"
        hashed = PasswordManager.hash_password(password)
        
        # Correct password
        assert PasswordManager.verify_password(password, hashed) is True
        
        # Wrong password
        assert PasswordManager.verify_password("wrong_password", hashed) is False
    
    def test_validate_password_strength(self):
        """Test password strength validation."""
        # Strong password
        is_valid, errors = PasswordManager.validate_password_strength("StrongPass123!")
        assert is_valid is True
        assert len(errors) == 0
        
        # Weak passwords
        is_valid, errors = PasswordManager.validate_password_strength("weak")
        assert is_valid is False
        assert len(errors) > 0
        
        is_valid, errors = PasswordManager.validate_password_strength("weakpass")
        assert is_valid is False
        assert any("uppercase" in error for error in errors)
        
        is_valid, errors = PasswordManager.validate_password_strength("WEAKPASS")
        assert is_valid is False
        assert any("lowercase" in error for error in errors)
        
        is_valid, errors = PasswordManager.validate_password_strength("WeakPass")
        assert is_valid is False
        assert any("digit" in error for error in errors)
        
        is_valid, errors = PasswordManager.validate_password_strength("WeakPass123")
        assert is_valid is False
        assert any("special character" in error for error in errors)


class TestMFAManager:
    """Test multi-factor authentication functionality."""
    
    def test_generate_secret(self):
        """Test MFA secret generation."""
        config = AuthConfig(jwt_secret="test_secret")
        mfa_manager = MFAManager(config)
        
        secret = mfa_manager.generate_secret()
        
        assert len(secret) == 32
        assert secret.isalnum()
    
    def test_generate_qr_code(self):
        """Test QR code generation."""
        config = AuthConfig(jwt_secret="test_secret")
        mfa_manager = MFAManager(config)
        
        secret = mfa_manager.generate_secret()
        qr_code = mfa_manager.generate_qr_code("test@example.com", secret)
        
        assert qr_code.startswith("data:image/png;base64,")
        assert len(qr_code) > 100
    
    def test_verify_totp(self):
        """Test TOTP verification."""
        config = AuthConfig(jwt_secret="test_secret")
        mfa_manager = MFAManager(config)
        
        secret = mfa_manager.generate_secret()
        
        # Generate a valid token (this would normally come from authenticator app)
        # For testing, we'll use a known secret and token
        test_secret = "JBSWY3DPEHPK3PXP"
        test_token = "123456"  # This would be generated by authenticator app
        
        # Note: This test might fail in real implementation as TOTP tokens are time-based
        # In a real test, you would need to generate a valid token for the current time
        result = mfa_manager.verify_totp(test_secret, test_token)
        # The result depends on the current time and token validity
    
    def test_generate_backup_codes(self):
        """Test backup code generation."""
        config = AuthConfig(jwt_secret="test_secret")
        mfa_manager = MFAManager(config)
        
        backup_codes = mfa_manager.generate_backup_codes()
        
        assert len(backup_codes) == 10
        assert all(len(code) == 8 for code in backup_codes)
        assert all(code.isalnum() for code in backup_codes)


class TestJWTManager:
    """Test JWT token management."""
    
    def test_generate_access_token(self):
        """Test access token generation."""
        config = AuthConfig(jwt_secret="test_secret")
        jwt_manager = JWTManager(config)
        
        token = jwt_manager.generate_access_token(
            user_id="test_user_id",
            email="test@example.com",
            role="investor",
            mfa_verified=True
        )
        
        assert len(token) > 0
        assert isinstance(token, str)
    
    def test_generate_refresh_token(self):
        """Test refresh token generation."""
        config = AuthConfig(jwt_secret="test_secret")
        jwt_manager = JWTManager(config)
        
        token = jwt_manager.generate_refresh_token("test_user_id")
        
        assert len(token) > 0
        assert isinstance(token, str)
    
    def test_verify_token(self):
        """Test token verification."""
        config = AuthConfig(jwt_secret="test_secret")
        jwt_manager = JWTManager(config)
        
        # Generate token
        token = jwt_manager.generate_access_token(
            user_id="test_user_id",
            email="test@example.com",
            role="investor"
        )
        
        # Verify token
        payload = jwt_manager.verify_token(token)
        
        assert payload['user_id'] == "test_user_id"
        assert payload['email'] == "test@example.com"
        assert payload['role'] == "investor"
        assert payload['type'] == "access"
    
    def test_verify_expired_token(self):
        """Test verification of expired token."""
        config = AuthConfig(jwt_secret="test_secret", jwt_expiration_hours=0)  # Expire immediately
        jwt_manager = JWTManager(config)
        
        # Generate token that expires immediately
        token = jwt_manager.generate_access_token(
            user_id="test_user_id",
            email="test@example.com",
            role="investor"
        )
        
        # Wait a moment to ensure expiration
        import time
        time.sleep(1)
        
        # Verify expired token should raise exception
        with pytest.raises(ValueError, match="Token has expired"):
            jwt_manager.verify_token(token)
    
    def test_verify_invalid_token(self):
        """Test verification of invalid token."""
        config = AuthConfig(jwt_secret="test_secret")
        jwt_manager = JWTManager(config)
        
        # Invalid token
        with pytest.raises(ValueError, match="Invalid token"):
            jwt_manager.verify_token("invalid_token")
    
    def test_refresh_access_token(self):
        """Test access token refresh."""
        config = AuthConfig(jwt_secret="test_secret")
        jwt_manager = JWTManager(config)
        
        # Generate refresh token
        refresh_token = jwt_manager.generate_refresh_token("test_user_id")
        
        # Refresh access token
        new_access_token = jwt_manager.refresh_access_token(refresh_token)
        
        assert len(new_access_token) > 0
        assert isinstance(new_access_token, str)


class TestAuthenticationManager:
    """Test main authentication manager."""
    
    @pytest.fixture
    def auth_manager(self):
        """Create authentication manager for testing."""
        config = AuthConfig(jwt_secret="test_secret")
        return AuthenticationManager(config)
    
    def test_initialization(self, auth_manager):
        """Test authentication manager initialization."""
        assert auth_manager.config.jwt_secret == "test_secret"
        assert auth_manager.password_manager is not None
        assert auth_manager.mfa_manager is not None
        assert auth_manager.jwt_manager is not None
    
    @pytest.mark.asyncio
    async def test_user_locked_check(self, auth_manager):
        """Test user lockout functionality."""
        user_id = "test_user_id"
        
        # User should not be locked initially
        assert auth_manager._is_user_locked(user_id) is False
        
        # Record failed login attempts
        for _ in range(5):  # Max attempts
            await auth_manager._record_failed_login(user_id)
        
        # User should now be locked
        assert auth_manager._is_user_locked(user_id) is True
        
        # Clear failed logins
        auth_manager._clear_failed_logins(user_id)
        assert auth_manager._is_user_locked(user_id) is False
    
    @pytest.mark.asyncio
    async def test_login_attempts_tracking(self, auth_manager):
        """Test login attempts tracking."""
        user_id = "test_user_id"
        
        # Record failed attempts
        await auth_manager._record_failed_login(user_id)
        await auth_manager._record_failed_login(user_id)
        
        # Check attempts count
        assert user_id in auth_manager.login_attempts
        assert auth_manager.login_attempts[user_id].attempts == 2
        
        # Clear attempts
        auth_manager._clear_failed_logins(user_id)
        assert user_id not in auth_manager.login_attempts


class TestAuthConfig:
    """Test authentication configuration."""
    
    def test_default_config(self):
        """Test default configuration values."""
        config = AuthConfig(jwt_secret="test_secret")
        
        assert config.jwt_secret == "test_secret"
        assert config.jwt_algorithm == "HS256"
        assert config.jwt_expiration_hours == 24
        assert config.refresh_token_expiration_days == 30
        assert config.password_min_length == 8
        assert config.max_login_attempts == 5
        assert config.lockout_duration_minutes == 30
        assert config.mfa_issuer == "NeoZork Pocket Hedge Fund"
    
    def test_custom_config(self):
        """Test custom configuration values."""
        config = AuthConfig(
            jwt_secret="custom_secret",
            jwt_algorithm="HS512",
            jwt_expiration_hours=12,
            refresh_token_expiration_days=7,
            password_min_length=12,
            max_login_attempts=3,
            lockout_duration_minutes=60,
            mfa_issuer="Custom Issuer"
        )
        
        assert config.jwt_secret == "custom_secret"
        assert config.jwt_algorithm == "HS512"
        assert config.jwt_expiration_hours == 12
        assert config.refresh_token_expiration_days == 7
        assert config.password_min_length == 12
        assert config.max_login_attempts == 3
        assert config.lockout_duration_minutes == 60
        assert config.mfa_issuer == "Custom Issuer"


if __name__ == "__main__":
    # Run tests
    pytest.main([__file__, "-v"])
