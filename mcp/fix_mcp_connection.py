#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# fix_mcp_connection.py
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è GitHub Copilot –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
"""

import os
import sys
import json
import shutil
import subprocess
import time
from pathlib import Path

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_dir = os.getcwd()
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP
    mcp_config = Path("mcp/mcp-config.json")
    if mcp_config.exists():
        print(f"‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP –Ω–∞–π–¥–µ–Ω: {mcp_config}")
    else:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP –Ω–µ –Ω–∞–π–¥–µ–Ω: {mcp_config}")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ IDE –¥–ª—è Copilot
    idea_dir = Path("../.idea")
    vscode_dir = Path("../.vscode")

    if idea_dir.exists():
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è IntelliJ/PyCharm (.idea)")

    if vscode_dir.exists():
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VSCode (.vscode)")

    if not (idea_dir.exists() or vscode_dir.exists()):
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ IDE (.idea –∏–ª–∏ .vscode)")

    return True

def clean_cache_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞...")

    # –û—á–∏—Å—Ç–∫–∞ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    pycache_dirs = list(Path("..").rglob("__pycache__"))
    for pycache in pycache_dirs:
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ: {pycache}")
        shutil.rmtree(pycache, ignore_errors=True)

    # –£–¥–∞–ª–µ–Ω–∏–µ .pyc —Ñ–∞–π–ª–æ–≤
    pyc_files = list(Path("..").rglob("*.pyc"))
    for pyc in pyc_files:
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ: {pyc}")
        pyc.unlink(missing_ok=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ª–æ–≥–æ–≤
    problem_file = Path("mcp/mcp-config.json.py")
    if problem_file.exists():
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {problem_file}")
        problem_file.unlink()
    else:
        print("–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª mcp-config.json.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return True

def validate_mcp_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP...")

    config_path = Path("mcp/mcp-config.json")
    if not config_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return False

    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)

        print("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP –≤–∞–ª–∏–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if "mcpServers" in config and "neozork-hld-prediction" in config["mcpServers"]:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP")
            return False

        return True
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_mcp_server():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞...")

    try:
        subprocess.run(
            [sys.executable, "mcp/test_mcp_server.py"],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=30
        )
        print("‚úÖ –¢–µ—Å—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False
    except subprocess.TimeoutExpired:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def restart_mcp_server():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞...")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
    try:
        if sys.platform == "win32":
            os.system("taskkill /f /im python.exe")
        else:
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python, –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å mcp_server.py
            ps_output = subprocess.check_output(
                ["ps", "-ef"],
                text=True
            )
            for line in ps_output.splitlines():
                if "mcp_server.py" in line and "python" in line:
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PID –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    parts = line.split()
                    if len(parts) > 1:
                        pid = parts[1]
                        os.system(f"kill -9 {pid}")
                        print(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å PID {pid}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python: {e}")

    # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    try:
        if sys.platform == "win32":
            subprocess.Popen(
                ["python", "mcp/mcp_server.py"],
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
        else:
            subprocess.Popen(
                ["python", "mcp/mcp_server.py"],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                start_new_session=True
            )
        print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üõ†Ô∏è  –£–¢–ò–õ–ò–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø GITHUB COPILOT –ö MCP –°–ï–†–í–ï–†–£")
    print("=" * 60)

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
        return False

    # –®–∞–≥ 2: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    if not clean_cache_files():
        print("\n‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞.")

    # –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP
    if not validate_mcp_config():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
        return False

    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞
    if not test_mcp_server():
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")

    # –®–∞–≥ 5: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
    if not restart_mcp_server():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
        return False

    print("\n" + "=" * 60)
    print("‚úÖ –ì–û–¢–û–í–û! –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º GitHub Copilot –∫ MCP —Å–µ—Ä–≤–µ—Ä—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å IDE (PyCharm, VSCode –∏–ª–∏ –¥—Ä—É–≥—É—é)")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è GitHub Copilot")
    print("3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ IDE")
    print("=" * 60)

    return True

if __name__ == "__main__":
    main()
