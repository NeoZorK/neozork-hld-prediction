#!/usr/bin/env python3
"""
AutoGluon Model Management Script
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ AutoGluon
"""

import os
import shutil
import json
from pathlib import Path
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AutoGluonModelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏ AutoGluon"""
    
    def __init__(self, models_dir="models/autogluon"):
        self.models_dir = Path(models_dir)
        self.archive_dir = self.models_dir / "archived_models"
        self.archive_dir.mkdir(exist_ok=True)
    
    def get_model_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        metadata_file = self.models_dir / "metadata.json"
        if metadata_file.exists():
            with open(metadata_file, 'r') as f:
                metadata = json.load(f)
            return metadata
        return None
    
    def archive_old_models(self, keep_best=True):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –ª—É—á—à—É—é"""
        models_path = self.models_dir / "models"
        if not models_path.exists():
            logger.warning("–ü–∞–ø–∫–∞ models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É —Å timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        archive_path = self.archive_dir / f"models_{timestamp}"
        archive_path.mkdir(exist_ok=True)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –∞—Ä—Ö–∏–≤
        for model_dir in models_path.iterdir():
            if model_dir.is_dir():
                shutil.move(str(model_dir), str(archive_path / model_dir.name))
        
        logger.info(f"–ú–æ–¥–µ–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤: {archive_path}")
        
        if keep_best:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            self._keep_best_model_only()
    
    def _keep_best_model_only(self):
        """–û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É models –∑–∞–Ω–æ–≤–æ
        models_path = self.models_dir / "models"
        models_path.mkdir(exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ WeightedEnsemble_L2_FULL (–ª—É—á—à–∞—è –º–æ–¥–µ–ª—å)
        best_model = "WeightedEnsemble_L2_FULL"
        archive_dirs = list(self.archive_dir.glob("models_*"))
        if archive_dirs:
            latest_archive = max(archive_dirs, key=os.path.getctime)
            best_model_path = latest_archive / best_model
            if best_model_path.exists():
                shutil.copytree(best_model_path, models_path / best_model)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model}")
    
    def clean_utils_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö"""
        utils_path = self.models_dir / "utils"
        if utils_path.exists():
            shutil.rmtree(utils_path)
            logger.info("–ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω")
    
    def get_model_size(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ –≤ MB"""
        total_size = 0
        for root, dirs, files in os.walk(self.models_dir):
            for file in files:
                file_path = os.path.join(root, file)
                total_size += os.path.getsize(file_path)
        return total_size / (1024 * 1024)  # MB
    
    def list_archived_models(self):
        """–°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        archives = list(self.archive_dir.glob("models_*"))
        return [archive.name for archive in archives]
    
    def restore_model(self, archive_name, model_name="WeightedEnsemble_L2_FULL"):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
        archive_path = self.archive_dir / archive_name
        if not archive_path.exists():
            logger.error(f"–ê—Ä—Ö–∏–≤ {archive_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        model_path = archive_path / model_name
        if not model_path.exists():
            logger.error(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–µ")
            return False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        target_path = self.models_dir / "models" / model_name
        if target_path.exists():
            shutil.rmtree(target_path)
        
        shutil.copytree(model_path, target_path)
        logger.info(f"–ú–æ–¥–µ–ª—å {model_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞ {archive_name}")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = AutoGluonModelManager()
    
    print("üîß AutoGluon Model Manager")
    print("=" * 40)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    model_info = manager.get_model_info()
    if model_info:
        print(f"üìä –ú–æ–¥–µ–ª—å: {model_info.get('name', 'Unknown')}")
        print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {model_info.get('date', 'Unknown')}")
    
    # –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
    size_mb = manager.get_model_size()
    print(f"üíæ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {size_mb:.2f} MB")
    
    # –°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–æ–≤
    archives = manager.list_archived_models()
    print(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(archives)}")
    
    # –û–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("1. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏")
    print("2. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏")
    print("4. –°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–æ–≤")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
    
    if choice == "1":
        manager.archive_old_models(keep_best=True)
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    elif choice == "2":
        manager.clean_utils_cache()
        print("‚úÖ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω")
    elif choice == "3":
        print(f"üíæ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {size_mb:.2f} MB")
    elif choice == "4":
        archives = manager.list_archived_models()
        if archives:
            print("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            for archive in archives:
                print(f"  - {archive}")
        else:
            print("üì¶ –ê—Ä—Ö–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    main()
