name: MCP Server Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'cursor_mcp_server.py'
      - 'pycharm_github_copilot_mcp.py'
      - 'tests/mcp/**'
      - 'docs/mcp-servers/**'
      - '.github/workflows/mcp-integration.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'cursor_mcp_server.py'
      - 'pycharm_github_copilot_mcp.py'
      - 'tests/mcp/**'
      - 'docs/mcp-servers/**'
      - '.github/workflows/mcp-integration.yml'

jobs:
  test-mcp-integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
        mcp-server: [cursor, pycharm]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          pip install black flake8 mypy
          
      - name: Create test data
        run: |
          mkdir -p mql5_feed
          echo "time,open,high,low,close,volume" > mql5_feed/CSVExport_BTCUSD_PERIOD_D1.csv
          echo "2023-01-01,10000,10500,9900,10200,1000" >> mql5_feed/CSVExport_BTCUSD_PERIOD_D1.csv
          echo "2023-01-02,10200,10800,10100,10600,1200" >> mql5_feed/CSVExport_BTCUSD_PERIOD_D1.csv
          
      - name: Run MCP server tests
        run: |
          if [ "${{ matrix.mcp-server }}" = "cursor" ]; then
            pytest tests/mcp/test_cursor_mcp_server.py -v --cov=cursor_mcp_server --cov-report=xml --cov-report=term-missing
          else
            pytest tests/mcp/test_pycharm_github_copilot_mcp.py -v --cov=pycharm_github_copilot_mcp --cov-report=xml --cov-report=term-missing
          fi
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: mcp-${{ matrix.mcp-server }}
          name: mcp-${{ matrix.mcp-server }}-coverage
          fail_ci_if_error: false
          
      - name: Run code quality checks
        run: |
          # Black formatting check
          black --check cursor_mcp_server.py pycharm_github_copilot_mcp.py tests/mcp/
          
          # Flake8 linting
          flake8 cursor_mcp_server.py pycharm_github_copilot_mcp.py tests/mcp/ --max-line-length=100 --ignore=E203,W503
          
          # MyPy type checking
          mypy cursor_mcp_server.py pycharm_github_copilot_mcp.py --ignore-missing-imports
          
  mcp-server-performance:
    runs-on: ubuntu-latest
    needs: test-mcp-integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark
          
      - name: Create test data
        run: |
          mkdir -p mql5_feed
          echo "time,open,high,low,close,volume" > mql5_feed/CSVExport_BTCUSD_PERIOD_D1.csv
          for i in {1..1000}; do
            echo "2023-01-$i,10000,10500,9900,10200,1000" >> mql5_feed/CSVExport_BTCUSD_PERIOD_D1.csv
          done
          
      - name: Run performance benchmarks
        run: |
          pytest tests/mcp/test_cursor_mcp_server.py::TestCursorMCPServer::test_performance -v --benchmark-only
          pytest tests/mcp/test_pycharm_github_copilot_mcp.py::TestPyCharmMCPServer::test_performance -v --benchmark-only
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: mcp-performance-results
          path: .pytest_cache/
          
  mcp-documentation:
    runs-on: ubuntu-latest
    needs: test-mcp-integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
          
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material pymdown-extensions
          
      - name: Build documentation
        run: |
          mkdocs build --site-dir docs/_build
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: mcp-documentation
          path: docs/_build/
          
  mcp-security:
    runs-on: ubuntu-latest
    needs: test-mcp-integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run security scan
        run: |
          # Bandit security scan
          bandit -r cursor_mcp_server.py pycharm_github_copilot_mcp.py -f json -o bandit-report.json || true
          
          # Safety dependency check
          safety check --json --output safety-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            
  mcp-deployment:
    runs-on: ubuntu-latest
    needs: [test-mcp-integration, mcp-server-performance, mcp-documentation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create deployment package
        run: |
          mkdir -p dist
          cp cursor_mcp_server.py dist/
          cp pycharm_github_copilot_mcp.py dist/
          cp cursor_mcp_config.json dist/
          cp -r docs/mcp-servers dist/
          cp -r tests/mcp dist/
          
      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: mcp-deployment-package
          path: dist/
          
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: MCP Server Release v${{ github.run_number }}
          body: |
            Automated MCP Server Release
            
            ## Changes
            - Updated MCP server implementations
            - Enhanced testing and documentation
            - Performance improvements
            
            ## Files
            - cursor_mcp_server.py
            - pycharm_github_copilot_mcp.py
            - Documentation and examples
            
            ## Testing
            - All tests passed
            - Performance benchmarks completed
            - Security scan completed
          draft: false
          prerelease: false 