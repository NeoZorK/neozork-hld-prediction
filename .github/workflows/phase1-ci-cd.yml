name: Phase 1 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, v0.5.3-eda ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: '0.4.0'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install flake8 black isort mypy

      - name: Code formatting check (Black)
        run: |
          black --check --diff src/ tests/

      - name: Import sorting check (isort)
        run: |
          isort --check-only --diff src/ tests/

      - name: Linting (Flake8)
        run: |
          flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503

      - name: Type checking (MyPy)
        run: |
          mypy src/ --ignore-missing-imports

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov pytest-xdist

      - name: Run unit tests
        run: |
          uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html -n auto

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Phase 1 Integration Tests
  phase1-integration:
    name: Phase 1 Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov

      - name: Test Real Exchange APIs
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from src.data.real_exchange_apis import test_exchange_apis
          test_exchange_apis()
          "

      - name: Test Real ML Models
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from src.ml.real_ml_models import test_real_ml_models
          test_real_ml_models()
          "

      - name: Test Real Trading System
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from src.integration.real_trading_system import test_real_trading_system
          test_real_trading_system()
          "

  # Web Dashboard Tests
  web-dashboard:
    name: Web Dashboard Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install flask pytest-flask

      - name: Test Dashboard Import
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from src.web.dashboard import app, initialize_trading_system
          print('Dashboard import successful')
          "

      - name: Test Dashboard Routes
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from src.web.dashboard import app
          with app.test_client() as client:
              response = client.get('/')
              assert response.status_code == 200
              print('Dashboard routes working')
          "

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install bandit safety

      - name: Security scan with Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install pytest-benchmark

      - name: Run performance tests
        run: |
          uv run python -c "
          import time
          import sys
          sys.path.insert(0, '.')
          
          # Test API performance
          start_time = time.time()
          from src.data.real_exchange_apis import test_exchange_apis
          test_exchange_apis()
          api_time = time.time() - start_time
          print(f'API test time: {api_time:.2f}s')
          
          # Test ML performance
          start_time = time.time()
          from src.ml.real_ml_models import test_real_ml_models
          test_real_ml_models()
          ml_time = time.time() - start_time
          print(f'ML test time: {ml_time:.2f}s')
          
          # Test trading system performance
          start_time = time.time()
          from src.integration.real_trading_system import test_real_trading_system
          test_real_trading_system()
          trading_time = time.time() - start_time
          print(f'Trading system test time: {trading_time:.2f}s')
          
          total_time = api_time + ml_time + trading_time
          print(f'Total Phase 1 test time: {total_time:.2f}s')
          
          # Performance thresholds
          assert api_time < 10, f'API test too slow: {api_time:.2f}s'
          assert ml_time < 15, f'ML test too slow: {ml_time:.2f}s'
          assert trading_time < 20, f'Trading system test too slow: {trading_time:.2f}s'
          assert total_time < 45, f'Total test time too slow: {total_time:.2f}s'
          "

  # Documentation Tests
  documentation:
    name: Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install mkdocs mkdocs-material

      - name: Check documentation links
        run: |
          # Check if all documentation files exist
          test -f docs/interactive/index.md
          test -f docs/interactive/next-steps-plan.md
          test -f docs/interactive/phase1-completion-report.md
          test -f README.md
          echo "All documentation files exist"

      - name: Validate markdown syntax
        run: |
          # Basic markdown validation
          find docs/ -name "*.md" -exec echo "Checking {}" \;
          echo "Markdown files found and accessible"

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, phase1-integration, web-dashboard, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install build twine

      - name: Build package
        run: |
          uv run python -m build

      - name: Check package
        run: |
          uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Deploy (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          echo "Deployment completed successfully"

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.build.result == 'success' && needs.deploy.result == 'success'
        run: |
          echo "✅ Phase 1 CI/CD Pipeline completed successfully!"
          echo "All tests passed and deployment completed."

      - name: Notify failure
        if: needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Phase 1 CI/CD Pipeline failed!"
          echo "Please check the logs for details."
