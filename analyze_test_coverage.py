#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏ –º–æ–¥—É–ª–µ–π –≤ src/ –∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
from pathlib import Path

def get_src_files():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ Python —Ñ–∞–π–ª—ã –∏–∑ src/ –∏ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"""
    src_dir = Path("src")
    root_dir = Path(".")
    src_files = []
    # src/
    for py_file in src_dir.rglob("*.py"):
        if "__pycache__" in str(py_file) or "egg-info" in str(py_file):
            continue
        src_files.append(py_file)
    # root/
    for py_file in root_dir.glob("*.py"):
        if py_file.name == Path(__file__).name:
            continue  # –Ω–µ –≤–∫–ª—é—á–∞–µ–º —Å–∞–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        src_files.append(py_file.resolve())
    return sorted(set(src_files))

def get_test_files():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    tests_dir = Path("tests")
    test_files = []
    for py_file in tests_dir.rglob("test_*.py"):
        test_files.append(py_file)
    return sorted(test_files)

def map_test_to_src(test_file):
    """–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    relative_path = test_file.relative_to(Path("tests"))
    module_name = relative_path.stem.replace("test_", "")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    if module_name.endswith("_indicator"):
        module_name = module_name.replace("_indicator", "_ind")
    elif module_name.endswith("_fetcher"):
        module_name = module_name.replace("_fetcher", "_fetcher")
    
    # –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ tests/src/, —Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ src/
    if relative_path.parts[0] == "src":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 'src' –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º –ø—É—Ç–∏
        src_subpath = Path(*relative_path.parts[1:-1])
        src_path = Path("src") / src_subpath / f"{module_name}.py"
        return [src_path]
    
    # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ tests/ (–Ω–∞–ø—Ä–∏–º–µ—Ä, test_fix_imports.py)
    root_path = Path(f"{module_name}.py")
    src_path = Path("src") / relative_path.parent / f"{module_name}.py"
    return [src_path, root_path]

def analyze_coverage():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏"""
    src_files = get_src_files()
    test_files = get_test_files()
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
    test_to_src = {}
    for test_file in test_files:
        src_paths = map_test_to_src(test_file)
        test_to_src[test_file] = src_paths
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    covered_files = set()
    missing_tests = []
    
    for test_file, src_paths in test_to_src.items():
        found = False
        for src_file in src_paths:
            if src_file.exists():
                covered_files.add(src_file.resolve())
                found = True
        if not found:
            print(f"‚ö†Ô∏è  –¢–µ—Å—Ç {test_file} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –±–µ–∑ —Ç–µ—Å—Ç–æ–≤
    for src_file in src_files:
        if src_file.resolve() not in covered_files:
            missing_tests.append(src_file)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"üìä –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –¢–ï–°–¢–ê–ú–ò")
    print(f"=" * 50)
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ src/ –∏ root: {len(src_files)}")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(test_files)}")
    print(f"–ü–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏: {len(covered_files)}")
    print(f"–ù–µ –ø–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏: {len(missing_tests)}")
    print(f"–ü–æ–∫—Ä—ã—Ç–∏–µ: {len(covered_files)/len(src_files)*100:.1f}%")
    print()
    
    if missing_tests:
        print("üìù –§–ê–ô–õ–´ –ë–ï–ó –¢–ï–°–¢–û–í:")
        print("-" * 30)
        for file in missing_tests:
            print(f"‚ùå {file}")
        print()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥—É–ª—è–º
        modules = {}
        for file in missing_tests:
            module = file.parent.name
            if module not in modules:
                modules[module] = []
            modules[module].append(file.name)
        
        print("üìÅ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ú–û–î–£–õ–Ø–ú:")
        print("-" * 30)
        for module, files in sorted(modules.items()):
            print(f"\nüî∏ {module}/ ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            for file in files:
                print(f"   - {file}")
    
    return missing_tests

if __name__ == "__main__":
    missing_tests = analyze_coverage()
    sys.exit(1 if missing_tests else 0) 